"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2031],{882:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-054a8325",path:"/reading/jsdesignpattern/sheet1.html",title:"《JavaScript设计模式》面向对象编程",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"封装",slug:"封装",children:[{level:3,title:"通过this添加的属性方法和在prototype中添加的有什么区别？",slug:"通过this添加的属性方法和在prototype中添加的有什么区别",children:[]},{level:3,title:"constructor",slug:"constructor",children:[]},{level:3,title:"创建对象的安全模式",slug:"创建对象的安全模式",children:[]}]},{level:2,title:"继承",slug:"继承",children:[{level:3,title:"类式继承",slug:"类式继承",children:[]},{level:3,title:"构造函数继承",slug:"构造函数继承",children:[]},{level:3,title:"组合继承",slug:"组合继承",children:[]},{level:3,title:"原型式继承",slug:"原型式继承",children:[]},{level:3,title:"寄生式继承",slug:"寄生式继承",children:[]},{level:3,title:"寄生组合式继承",slug:"寄生组合式继承",children:[]}]}],filePathRelative:"reading/jsdesignpattern/sheet1.md",git:{updatedTime:1626107275e3,contributors:[{name:"sunven",email:"604164227@qq.com",commits:1}]}}},4723:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="《javascript设计模式》面向对象编程" tabindex="-1"><a class="header-anchor" href="#《javascript设计模式》面向对象编程" aria-hidden="true">#</a> 《JavaScript设计模式》面向对象编程</h1><h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">Students</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Students</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">getStuInfo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="通过this添加的属性方法和在prototype中添加的有什么区别" tabindex="-1"><a class="header-anchor" href="#通过this添加的属性方法和在prototype中添加的有什么区别" aria-hidden="true">#</a> 通过this添加的属性方法和在prototype中添加的有什么区别？</h3><ul><li>通过prototype继承的方法并不是对象自身的所以我们每次通过类创建一个新对象时原来的这些属性和方法不会再次创建</li><li>通过this添加的属性、方法是在当前对象上添加的，每次创建新对象this所指向的属性和方法都会得到相应的创建</li></ul><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>constructor是一个属性，当创建一个函数或者对象时都会为其创建一个原型对象prototype，在prototype对象中又会像函数中创建this一样创建一个constructor属性，那么constructor属性指向的就是拥有整个原型对象的函数或对象</p><h3 id="创建对象的安全模式" tabindex="-1"><a class="header-anchor" href="#创建对象的安全模式" aria-hidden="true">#</a> 创建对象的安全模式</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">Book</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> time<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Book</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>tiem <span class="token operator">=</span> time<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> time<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> book2 <span class="token operator">=</span> <span class="token function">Book</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><h3 id="类式继承" tabindex="-1"><a class="header-anchor" href="#类式继承" aria-hidden="true">#</a> 类式继承</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ParentClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>perentValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">ParentClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getPerentValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>perentValue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">ChildClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>childValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">ChildClass</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParentClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ChildClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getChlidValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>childValue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="为什么第一个类的实例赋值给了第二个类的原型" tabindex="-1"><a class="header-anchor" href="#为什么第一个类的实例赋值给了第二个类的原型" aria-hidden="true">#</a> 为什么第一个类的实例赋值给了第二个类的原型？</h4><ul><li>类的原型对象就是为类的原型添加公有属性和添加公有方法，但是类不能直接访问这些属性和方法，必须通过原型prototype来访问。当我们实例化一个父类的时候，新创建的对象复制了父类构造函数里的属性和方法，并且将原型<code>__proto__</code>指向了父类的原型对象</li><li><code>prototype</code>是函数的内置属性，<code>__proto__</code>是对象的内置属性</li></ul><h4 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h4><ul><li>不同实例影响公共属性</li><li>由于子类实现的继承是其原型prototype对父类实例化实现的，所以在创建父类的时候，是无法向父类传递参数的，因而在实例化父类的时候也无法对父类的构造函数类的属性进行初始化</li></ul><h3 id="构造函数继承" tabindex="-1"><a class="header-anchor" href="#构造函数继承" aria-hidden="true">#</a> 构造函数继承</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ParentClass</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//引用类型的公有属性</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>parentValue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;C#&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JAVA&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PHP&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">//值类型公有属性</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">ParentClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showParents</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">ChildClass</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//继承父类</span>\n  <span class="token function">ParentClass</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="问题-1" tabindex="-1"><a class="header-anchor" href="#问题-1" aria-hidden="true">#</a> 问题</h4><ul><li>这种类型的继承不涉及到原型prototype，所以父类的原型方法也不会被子类继承</li></ul><h3 id="组合继承" tabindex="-1"><a class="header-anchor" href="#组合继承" aria-hidden="true">#</a> 组合继承</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ParentClass</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//引用类型的公有属性</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>parentValue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;C#&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JAVA&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PHP&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">//值类型公有属性</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">ParentClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getParentValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">ChildClass</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> childValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//通过构造函数继承，继承父类的id属性</span>\n  <span class="token function">ParentClass</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//子类新增公用属性</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>childValue <span class="token operator">=</span> childValue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">ChildClass</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParentClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ChildClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getChildValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>childValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h4 id="问题-2" tabindex="-1"><a class="header-anchor" href="#问题-2" aria-hidden="true">#</a> 问题</h4><ul><li>用构造器执行了一遍父类的构造函数，在实现子类原型的类式继承又调用了一遍父类的构造函数，因此父类构造函数被调用两次，所以还不是最完美的继承方式</li></ul><h3 id="原型式继承" tabindex="-1"><a class="header-anchor" href="#原型式继承" aria-hidden="true">#</a> 原型式继承</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//声明一个过渡函数对象</span>\n  <span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token comment">//过渡对象的原型继承父对象</span>\n  <span class="token class-name">Obj</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>\n  <span class="token comment">//返回过渡对象的一个实例，该实例的原型继承了父对象</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> Students <span class="token operator">=</span> <span class="token punctuation">{</span>\n  admissionTime<span class="token operator">:</span> <span class="token string">&quot;2017&quot;</span><span class="token punctuation">,</span>\n  hobby<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;唱歌&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;画画&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> student1 <span class="token operator">=</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>Students<span class="token punctuation">)</span><span class="token punctuation">;</span>\nstudent1<span class="token punctuation">.</span>admissionTime <span class="token operator">=</span> <span class="token string">&quot;2016&quot;</span><span class="token punctuation">;</span>\nstudent1<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;游泳&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> student2 <span class="token operator">=</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>Students<span class="token punctuation">)</span><span class="token punctuation">;</span>\nstudent2<span class="token punctuation">.</span>admissionTime <span class="token operator">=</span> <span class="token string">&quot;2015&quot;</span><span class="token punctuation">;</span>\nstudent2<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;看书&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><blockquote><p>Object.create()方法就是原型式继承。</p></blockquote><h4 id="问题-3" tabindex="-1"><a class="header-anchor" href="#问题-3" aria-hidden="true">#</a> 问题</h4><ul><li>不同实例影响公共属性</li></ul><h3 id="寄生式继承" tabindex="-1"><a class="header-anchor" href="#寄生式继承" aria-hidden="true">#</a> 寄生式继承</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">CreateStu</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//通过原型式继承方式创建新对象</span>\n  <span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//扩展新对象</span>\n  stu<span class="token punctuation">.</span><span class="token function-variable function">getAdmissionTime</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>admissionTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">//返回拓展后的新对象</span>\n  <span class="token keyword">return</span> stu<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> student1 <span class="token operator">=</span> <span class="token function">CreateStu</span><span class="token punctuation">(</span>Students<span class="token punctuation">)</span><span class="token punctuation">;</span>\nstudent1<span class="token punctuation">.</span>admissionTime <span class="token operator">=</span> <span class="token string">&quot;2016&quot;</span><span class="token punctuation">;</span>\nstudent1<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;游泳&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> student2 <span class="token operator">=</span> <span class="token function">CreateStu</span><span class="token punctuation">(</span>Students<span class="token punctuation">)</span><span class="token punctuation">;</span>\nstudent2<span class="token punctuation">.</span>admissionTime <span class="token operator">=</span> <span class="token string">&quot;2015&quot;</span><span class="token punctuation">;</span>\nstudent2<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;看书&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="问题-4" tabindex="-1"><a class="header-anchor" href="#问题-4" aria-hidden="true">#</a> 问题</h4><ul><li>不同实例影响公共属性</li></ul><h3 id="寄生组合式继承" tabindex="-1"><a class="header-anchor" href="#寄生组合式继承" aria-hidden="true">#</a> 寄生组合式继承</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//声明一个过渡函数对象</span>\n  <span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token comment">//过渡对象的原型继承父对象</span>\n  <span class="token class-name">Obj</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>\n  <span class="token comment">//返回过渡对象的一个实例，该实例的原型继承了父对象</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">ChildClass<span class="token punctuation">,</span> ParentClass</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//复制一份父类的原型保存在变量中</span>\n  <span class="token keyword">var</span> parent <span class="token operator">=</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span><span class="token class-name">ParentClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//修正因为重写子类原型导致子类的constructor属性被修改</span>\n  parent<span class="token punctuation">.</span>constructor <span class="token operator">=</span> ChildClass<span class="token punctuation">;</span>\n  <span class="token comment">//设置子类的原型</span>\n  <span class="token class-name">ChildClass</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> parent<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">ParentClass</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//引用类型的公有属性</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>parentValue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;C#&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JAVA&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PHP&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">//值类型公有属性</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">ParentClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getParentValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">ChildClass</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> childValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//构造函数式继承父类</span>\n  <span class="token function">ParentClass</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//子类新增属性</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>childValue <span class="token operator">=</span> childValue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">inheritPrototype</span><span class="token punctuation">(</span>ChildClass<span class="token punctuation">,</span> ParentClass<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ChildClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getChildValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChildClass</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> test2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChildClass</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ntest1<span class="token punctuation">.</span>parentValue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;C++&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test1<span class="token punctuation">.</span>parentValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&quot;C#&quot;, &quot;JAVA&quot;, &quot;PHP&quot;, &quot;C++&quot;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span>parentValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&quot;C#&quot;, &quot;JAVA&quot;, &quot;PHP&quot;]</span>\ntest1<span class="token punctuation">.</span><span class="token function">getParentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&quot;C#&quot;, &quot;JAVA&quot;, &quot;PHP&quot;, &quot;C++&quot;]</span>\ntest1<span class="token punctuation">.</span><span class="token function">getChildValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//张三</span>\ntest2<span class="token punctuation">.</span><span class="token function">getParentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&quot;C#&quot;, &quot;JAVA&quot;, &quot;PHP&quot;]</span>\ntest2<span class="token punctuation">.</span><span class="token function">getChildValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//李四</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>子类再想添加原型方法必须通过prototype对象，通过点语法的形式一个一个添加方法，否则直接赋予对象就会覆盖掉从父类原型继承的对象</p>',36),t={render:function(n,s){return p}}}}]);