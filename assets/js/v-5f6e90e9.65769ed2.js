"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8670],{1035:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5f6e90e9",path:"/dotnet/other/csharpstackapplication.html",title:"C# 栈的应用",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"回文判断",slug:"回文判断",children:[]},{level:2,title:"进制转化",slug:"进制转化",children:[]},{level:2,title:"括号匹配",slug:"括号匹配",children:[]},{level:2,title:"中缀转后缀表达式求值",slug:"中缀转后缀表达式求值",children:[]},{level:2,title:"reference",slug:"reference",children:[]}],filePathRelative:"dotnet/other/csharpstackapplication.md",git:{updatedTime:1626107275e3,contributors:[{name:"sunven",email:"604164227@qq.com",commits:1}]}}},7952:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var p=a(6252);const t=(0,p.uE)('<h1 id="c-栈的应用" tabindex="-1"><a class="header-anchor" href="#c-栈的应用" aria-hidden="true">#</a> C# 栈的应用</h1><blockquote><p>栈的特性：后进先出（LIFO）</p></blockquote><h2 id="回文判断" tabindex="-1"><a class="header-anchor" href="#回文判断" aria-hidden="true">#</a> 回文判断</h2><p>类似 123321，123a321 即为回文</p><p>思路：</p><ul><li>将字符串前一半入栈</li><li>依次弹出栈与字符串后一半比较</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsPlalindrome</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>Length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token class-name"><span class="token keyword">var</span></span> len <span class="token operator">=</span> str<span class="token punctuation">.</span>Length <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">?</span> str<span class="token punctuation">.</span>Length <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> len<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="进制转化" tabindex="-1"><a class="header-anchor" href="#进制转化" aria-hidden="true">#</a> 进制转化</h2><p>10 进制转 8 进制 1024→2000</p><p>转换流程如下：</p><table><thead><tr><th>N</th><th>N div</th><th>N mod</th></tr></thead><tbody><tr><td>1024</td><td>128</td><td>0</td></tr><tr><td>128</td><td>16</td><td>0</td></tr><tr><td>16</td><td>2</td><td>0</td></tr><tr><td>2</td><td>0</td><td>2</td></tr></tbody></table><p>思路：</p><ul><li>取模入栈</li><li>整除运算直至为 0</li></ul><p>实现如下：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token number">4396</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">%</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">value</span> <span class="token operator">/=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="括号匹配" tabindex="-1"><a class="header-anchor" href="#括号匹配" aria-hidden="true">#</a> 括号匹配</h2><ul><li>圆括号、方括号和花括号可以任意嵌套</li><li>正确格式：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{{`90[]`}}`(4)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>错误格式：</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{2(1}1)[3]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>思路：</p><ul><li>如果时<code>(</code>,<code>[</code>,<code>{</code> 则入栈</li><li>如果时<code>)</code>,<code>]</code>,<code>}</code> 则将对应左边括号弹出栈</li></ul><p>实现如下：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Check</span><span class="token punctuation">(</span><span class="token string">&quot;{abc[1](2)}sss(aaa)[({})]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Check</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> c <span class="token keyword">in</span> str<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">case</span> <span class="token string character">&#39;(&#39;</span><span class="token punctuation">:</span>\n            <span class="token keyword">case</span> <span class="token string character">&#39;{&#39;</span><span class="token punctuation">:</span>\n            <span class="token keyword">case</span> <span class="token string character">&#39;[&#39;</span><span class="token punctuation">:</span>\n                stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token keyword">case</span> <span class="token string character">&#39;)&#39;</span><span class="token punctuation">:</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> stack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string character">&#39;(&#39;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">else</span>\n                <span class="token punctuation">{</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token keyword">case</span> <span class="token string character">&#39;}&#39;</span><span class="token punctuation">:</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> stack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string character">&#39;{&#39;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">else</span>\n                <span class="token punctuation">{</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token keyword">case</span> <span class="token string character">&#39;]&#39;</span><span class="token punctuation">:</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> stack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string character">&#39;[&#39;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">else</span>\n                <span class="token punctuation">{</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> stack<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><h2 id="中缀转后缀表达式求值" tabindex="-1"><a class="header-anchor" href="#中缀转后缀表达式求值" aria-hidden="true">#</a> 中缀转后缀表达式求值</h2><p>运算规则</p><ul><li>从左算到右</li><li>先乘除，后加减</li><li>先括号内，后括号外</li></ul><p>相邻两个操作符优先级判断如下：</p><p>c1 表示前一个操作符，c2 表示后一个操作符</p><table><thead><tr><th>c1/c2</th><th>+</th><th>-</th><th>*</th><th>/</th><th>(</th><th>)</th></tr></thead><tbody><tr><td><code>+</code></td><td>&gt;</td><td>&gt;</td><td>&lt;</td><td>&lt;</td><td>&lt;</td><td>&gt;</td></tr><tr><td><code>-</code></td><td>&gt;</td><td>&gt;</td><td>&lt;</td><td>&lt;</td><td>&lt;</td><td>&gt;</td></tr><tr><td><code>*</code></td><td>&lt;</td><td>&lt;</td><td>&gt;</td><td>&gt;</td><td>&lt;</td><td>&gt;</td></tr><tr><td>/</td><td>&lt;</td><td>&lt;</td><td>&gt;</td><td>&gt;</td><td>&lt;</td><td>&gt;</td></tr><tr><td>(</td><td>&lt;</td><td>&lt;</td><td>&lt;</td><td>&lt;</td><td>&lt;</td><td>=</td></tr><tr><td>)</td><td>&gt;</td><td>&gt;</td><td>&gt;</td><td>&gt;</td><td></td><td>&gt;</td></tr></tbody></table><p>思路：</p><ul><li>分操作数栈和操作符栈</li><li>操作数进操作数栈</li><li>当前操作符优先级大于顶栈操作符则入栈</li><li>当前操作符优先级小于顶栈操作符，则弹出顶栈，弹出两个操作数运算，运算结果再入栈</li><li>重复上一步骤，直至将当前操作符入栈</li><li>若最后两栈都不为空，则依次弹出操作符与操作数计算，直至操作符栈为空，此时操作数栈剩一个元素即为最终结果。</li></ul><p>实现如下：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Calculation</span><span class="token punctuation">(</span><span class="token string">&quot;(2+3)*2+2*(6-3)/(4-2)+2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Calculation</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">//操作数栈</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> opndStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//操作符栈</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> optrStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> c <span class="token keyword">in</span> str<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">.</span><span class="token function">IsDigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">//当前的字符是操作数</span>\n            opndStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">//当前的字符是操作符</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span>optrStack<span class="token punctuation">.</span>Count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                <span class="token class-name"><span class="token keyword">var</span></span> priority <span class="token operator">=</span> <span class="token function">Priority</span><span class="token punctuation">(</span>optrStack<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>priority <span class="token operator">==</span> <span class="token string character">&#39;&lt;&#39;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">{</span>\n                    <span class="token comment">//栈顶优先级小与当前操作符</span>\n                    <span class="token comment">//入栈</span>\n                    optrStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>priority <span class="token operator">==</span> <span class="token string character">&#39;=&#39;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">{</span>\n                    <span class="token comment">//栈顶优先级等于当前操作符</span>\n                    <span class="token comment">//就是左右括号匹配，弹出左括号</span>\n                    optrStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>priority <span class="token operator">!=</span> <span class="token string character">&#39;&gt;&#39;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">{</span>\n                    <span class="token keyword">continue</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token comment">//栈顶优先级大于当前操作符</span>\n                <span class="token comment">//需要计算</span>\n                <span class="token class-name"><span class="token keyword">var</span></span> optr <span class="token operator">=</span> optrStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name"><span class="token keyword">var</span></span> value2 <span class="token operator">=</span> opndStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name"><span class="token keyword">var</span></span> value1 <span class="token operator">=</span> opndStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                opndStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token function">Operate</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> optr<span class="token punctuation">,</span> value2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">//1.第一次栈为空直接入栈。</span>\n            <span class="token comment">//2.退栈直至为空当前操作符也需要入栈,但&quot;)&quot;无需入栈</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>optrStack<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token string character">&#39;)&#39;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                optrStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>optrStack<span class="token punctuation">.</span>Count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> optr <span class="token operator">=</span> optrStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> value2 <span class="token operator">=</span> opndStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> value1 <span class="token operator">=</span> opndStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        opndStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token function">Operate</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> optr<span class="token punctuation">,</span> value2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> opndStack<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">?</span> opndStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Operate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> value1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">char</span></span> optr<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> value2<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>optr<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token string character">&#39;+&#39;</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> value1 <span class="token operator">+</span> value2<span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token string character">&#39;-&#39;</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> value1 <span class="token operator">-</span> value2<span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token string character">&#39;*&#39;</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> value1 <span class="token operator">*</span> value2<span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token string character">&#39;/&#39;</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> value1 <span class="token operator">/</span> value2<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>\n<span class="token doc-comment comment">/// 比较栈顶操作符与当前操作符优先级</span>\n<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>\n<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>栈顶操作符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>\n<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>当前操作符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>\n<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">char</span></span> <span class="token function">Priority</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">char</span></span> c1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">char</span></span> c2<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>c1<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token string character">&#39;+&#39;</span><span class="token punctuation">:</span>\n        <span class="token keyword">case</span> <span class="token string character">&#39;-&#39;</span><span class="token punctuation">:</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>c2 <span class="token operator">==</span> <span class="token string character">&#39;+&#39;</span> <span class="token operator">||</span> c2 <span class="token operator">==</span> <span class="token string character">&#39;-&#39;</span> <span class="token operator">||</span> c2 <span class="token operator">==</span> <span class="token string character">&#39;)&#39;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token string character">&#39;&gt;&#39;</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> <span class="token string character">&#39;&lt;&#39;</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token string character">&#39;*&#39;</span><span class="token punctuation">:</span>\n        <span class="token keyword">case</span> <span class="token string character">&#39;/&#39;</span><span class="token punctuation">:</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>c2 <span class="token operator">==</span> <span class="token string character">&#39;(&#39;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token string character">&#39;&lt;&#39;</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> <span class="token string character">&#39;&gt;&#39;</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token string character">&#39;(&#39;</span> <span class="token keyword">when</span> c2 <span class="token operator">==</span> <span class="token string character">&#39;)&#39;</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> <span class="token string character">&#39;=&#39;</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token string character">&#39;(&#39;</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> <span class="token string character">&#39;&lt;&#39;</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token string character">&#39;)&#39;</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> <span class="token string character">&#39;&gt;&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token string character">&#39;&gt;&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> reference</h2>',35),e={href:"https://blog.csdn.net/gavin_john/article/details/71374487",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("栈的应用"),o={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[(0,p._)("a",e,[c,(0,p.Wm)(a)])])],64)}}}}]);