"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6207],{4338:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-6a9f1347",path:"/dotnet/other/jsonmediatypeformatter-swagger.html",title:"JsonMediaTypeFormatter 和 Swagger",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"方法一",slug:"方法一",children:[]},{level:2,title:"方法二",slug:"方法二",children:[]}],filePathRelative:"dotnet/other/jsonmediatypeformatter-swagger.md",git:{updatedTime:1626197174e3,contributors:[{name:"sunven",email:"604164227@qq.com",commits:2}]}}},3858:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h1 id="jsonmediatypeformatter-和-swagger" tabindex="-1"><a class="header-anchor" href="#jsonmediatypeformatter-和-swagger" aria-hidden="true">#</a> JsonMediaTypeFormatter 和 Swagger</h1><p>使用 JsonMediaTypeFormatter 是为了让 long 类型的字段都以字符串格式输出</p><h2 id="方法一" tabindex="-1"><a class="header-anchor" href="#方法一" aria-hidden="true">#</a> 方法一</h2><p>WebApiConfig 中增加</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> jsonFormatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonMediaTypeFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> settings <span class="token operator">=</span> jsonFormatter<span class="token punctuation">.</span>SerializerSettings<span class="token punctuation">;</span>\nsettings<span class="token punctuation">.</span>Converters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LongToStringConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconfig<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IContentNegotiator</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonContentNegotiator</span><span class="token punctuation">(</span>jsonFormatter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>JsonContentNegotiator 类</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonContentNegotiator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IContentNegotiator</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">JsonMediaTypeFormatter</span> _jsonFormatter<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token function">JsonContentNegotiator</span><span class="token punctuation">(</span><span class="token class-name">JsonMediaTypeFormatter</span> formatter<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        _jsonFormatter <span class="token operator">=</span> formatter<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">ContentNegotiationResult</span> <span class="token function">Negotiate</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name">HttpRequestMessage</span> request<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>MediaTypeFormatter<span class="token punctuation">&gt;</span></span> formatters<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ContentNegotiationResult</span><span class="token punctuation">(</span>_jsonFormatter<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MediaTypeHeaderValue</span><span class="token punctuation">(</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>LongToStringConverter 类</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongToStringConverter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Newtonsoft<span class="token punctuation">.</span>Json<span class="token punctuation">.</span>JsonConverter</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ReadJson</span><span class="token punctuation">(</span><span class="token class-name">JsonReader</span> reader<span class="token punctuation">,</span> <span class="token class-name">Type</span> objectType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> existingValue<span class="token punctuation">,</span> <span class="token class-name">JsonSerializer</span> serializer<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> jt <span class="token operator">=</span> JToken<span class="token punctuation">.</span><span class="token function">ReadFrom</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> jt<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Value</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CanConvert</span><span class="token punctuation">(</span><span class="token class-name">Type</span> objectType<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">long</span></span><span class="token punctuation">)</span> <span class="token operator">==</span> objectType<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteJson</span><span class="token punctuation">(</span><span class="token class-name">JsonWriter</span> writer<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">JsonSerializer</span> serializer<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        serializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><blockquote><p>这种方法会导致 Swagger 文档不能打开（js 报错）</p></blockquote><h2 id="方法二" tabindex="-1"><a class="header-anchor" href="#方法二" aria-hidden="true">#</a> 方法二</h2><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> defaultSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerSettings</span>\n<span class="token punctuation">{</span>\n    Formatting <span class="token operator">=</span> Formatting<span class="token punctuation">.</span>Indented<span class="token punctuation">,</span>\n    ContractResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CamelCasePropertyNamesContractResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    Converters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>JsonConverter<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LongToStringConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nJsonConvert<span class="token punctuation">.</span>DefaultSettings <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> defaultSettings<span class="token punctuation">;</span>\nconfig<span class="token punctuation">.</span>Formatters<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconfig<span class="token punctuation">.</span>Formatters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonMediaTypeFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\nconfig<span class="token punctuation">.</span>Formatters<span class="token punctuation">.</span>JsonFormatter<span class="token punctuation">.</span>SerializerSettings <span class="token operator">=</span> defaultSettings<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',12),p={render:function(n,s){return t}}}}]);