"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6965],{3947:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-305e68da",path:"/develop/docker/dotnetcoreonwindocker.html",title:"windows下docker与.net core 的简单示例",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一 windows 下安装docker",slug:"一-windows-下安装docker",children:[]},{level:2,title:"二 .net core 项目",slug:"二-net-core-项目",children:[]},{level:2,title:"三 镜像",slug:"三-镜像",children:[{level:3,title:"在publish目录下新建Dockerfile文件",slug:"在publish目录下新建dockerfile文件",children:[]},{level:3,title:"生成镜像",slug:"生成镜像",children:[]},{level:3,title:"运行",slug:"运行",children:[]}]},{level:2,title:"reference",slug:"reference",children:[]}],filePathRelative:"develop/docker/dotnetcoreonwindocker.md",git:{updatedTime:1626107275e3,contributors:[{name:"sunven",email:"604164227@qq.com",commits:1}]}}},110:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var e=a(6252);const t=(0,e.uE)('<h1 id="windows下docker与-net-core-的简单示例" tabindex="-1"><a class="header-anchor" href="#windows下docker与-net-core-的简单示例" aria-hidden="true">#</a> windows下docker与.net core 的简单示例</h1><h2 id="一-windows-下安装docker" tabindex="-1"><a class="header-anchor" href="#一-windows-下安装docker" aria-hidden="true">#</a> 一 windows 下安装docker</h2><h2 id="二-net-core-项目" tabindex="-1"><a class="header-anchor" href="#二-net-core-项目" aria-hidden="true">#</a> 二 .net core 项目</h2><ol><li>新建一个空的ASP.NET Core Web 应用程序</li><li>在该项目的目录下执行<code>dotnet publish</code>,可以看到在<code>bin\\Debug\\netcoreapp2.1</code>目录下生成<code>publish</code></li><li>在<code>publish</code>目录下执行<code>dotnet WebApplication1.dll</code>可以运行项目</li></ol><p>主要代码如下：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">BuildWebHost</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IWebHost</span> <span class="token function">BuildWebHost</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> WebHost<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">UseKestrel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">UseUrls</span><span class="token punctuation">(</span><span class="token string">&quot;http://*:5001&quot;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">UseContentRoot</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">UseIISIntegration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="三-镜像" tabindex="-1"><a class="header-anchor" href="#三-镜像" aria-hidden="true">#</a> 三 镜像</h2><h3 id="在publish目录下新建dockerfile文件" tabindex="-1"><a class="header-anchor" href="#在publish目录下新建dockerfile文件" aria-hidden="true">#</a> 在publish目录下新建Dockerfile文件</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># 基于microsoft/dotnet:latest构建Docker Image\nFROM microsoft/dotnet:latest\n \n# 进入docker中的/usr/local/src目录\nRUN cd /usr/local/src\n \n# 创建WebApplication1目录\nRUN mkdir WebApplication1\n \n# 设置工作路径\nWORKDIR /usr/local/src/WebApplication1\n \n# 将当前文件夹下的所有文件全部复制到工作目录\nCOPY *.* ./\n \n# 向外界暴露5001端口\nEXPOSE 5001\n \n# 执行dotnet WebApplication1.dll命令\nCMD [&quot;dotnet&quot;, &quot;WebApplication1.dll&quot;]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="生成镜像" tabindex="-1"><a class="header-anchor" href="#生成镜像" aria-hidden="true">#</a> 生成镜像</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker build -t core/docker .\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>core/docker可以理解为名称</p><p>如果是第一次生成，由于需要下载microsoft/dotnet:latest这个Docker Image作为基础Image</p><h3 id="运行" tabindex="-1"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h3><p>把装好的docker运行起来，执行以下命令：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker run -it -p 8001:5001 core/docker\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>-it参数表示需要提供一个模拟的shell环境，并要求有用户交互功能，这样当我们按下Ctrl+C的时候，就可以停止我们的应用程序</li><li>-p 8001:5001参数表示需要将Docker Container的5001端口映射到主机环境的8001端口，也就是客户端可以直接通过8001端口访问我们的应用程序</li><li>core/docker参数指定了需要运行的Docker Image。此处采用默认的latest标签</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker ps //运行该命令可以查看所有容器，包括刚才运行的core/docker\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="错误解决" tabindex="-1"><a class="header-anchor" href="#错误解决" aria-hidden="true">#</a> 错误解决</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Error:\n  An assembly specified in the application dependencies manifest (WebApplication1.deps.json) was not found:\n    package: &#39;System.Data.SqlClient&#39;, version: &#39;4.4.3&#39;\n    path: &#39;runtimes/unix/lib/netstandard2.0/System.Data.SqlClient.dll&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>依赖的版本与实际引用的版本不相同，更细到最新的dotcore，再更新nuget</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> reference</h2>',22),p={href:"http://www.cnblogs.com/daxnet/p/5782019.html",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("在docker中运行ASP.NET Core Web API应用程序"),c={href:"http://www.cnblogs.com/daxnet/p/5793479.html",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("Docker容器环境下ASP.NET Core Web API应用程序的调试"),r={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[(0,e._)("a",p,[l,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",c,[o,(0,e.Wm)(a)])])],64)}}}}]);