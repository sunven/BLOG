"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8145],{4229:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7dfca4bb",path:"/dotnet/abp/transparentproxy.html",title:"透明代理基础",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一 如何拦截方法调用？",slug:"一-如何拦截方法调用",children:[{level:3,title:"透明代理",slug:"透明代理",children:[]}]},{level:2,title:"Reference",slug:"reference",children:[]}],filePathRelative:"dotnet/abp/transparentproxy.md",git:{updatedTime:1626107275e3,contributors:[{name:"sunven",email:"604164227@qq.com",commits:1}]}}},7839:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var p=a(6252);const e=(0,p.uE)('<h1 id="透明代理基础" tabindex="-1"><a class="header-anchor" href="#透明代理基础" aria-hidden="true">#</a> 透明代理基础</h1><h2 id="一-如何拦截方法调用" tabindex="-1"><a class="header-anchor" href="#一-如何拦截方法调用" aria-hidden="true">#</a> 一 如何拦截方法调用？</h2><h3 id="透明代理" tabindex="-1"><a class="header-anchor" href="#透明代理" aria-hidden="true">#</a> 透明代理</h3><blockquote><p>使用任何穿越远程边界的对象实际上都是在使用透明代理，透明代理会让你觉得远程对象好像就在客户端空间里。 它会把所有调用通过远程调用框架转发给一个真实对象。 透明代理对象寄宿在一个类型为RealProxy的托管类型实例内，RealProxy实现了转发透明代理传递过来的调用的功能。</p></blockquote><h4 id="获取透明代理" tabindex="-1"><a class="header-anchor" href="#获取透明代理" aria-hidden="true">#</a> 获取透明代理</h4><p>定义一个类继承RealProxy, IRemotingTypeInfo</p><p>重写Invoke方法</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">IMessage</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">IMessage</span> msg<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">IMethodCallMessage</span> methodMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MethodCallMessageWrapper</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IMethodCallMessage<span class="token punctuation">)</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> methodInfo <span class="token operator">=</span> <span class="token function">GetMethods</span><span class="token punctuation">(</span>_proxyType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> methodMessage<span class="token punctuation">.</span>MethodBase<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">object</span></span> objReturnValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>methodMessage<span class="token punctuation">.</span>MethodName<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">&quot;GetType&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>methodMessage<span class="token punctuation">.</span>ArgCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        objReturnValue <span class="token operator">=</span> _proxyType<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodInfo<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">&quot;Equals&quot;</span><span class="token punctuation">)</span>\n            <span class="token operator">||</span> methodInfo<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">&quot;GetHashCode&quot;</span><span class="token punctuation">)</span>\n            <span class="token operator">||</span> methodInfo<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">&quot;ToString&quot;</span><span class="token punctuation">)</span>\n            <span class="token operator">||</span> methodInfo<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">&quot;GetType&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>_unProxyMethods<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item <span class="token operator">!=</span> methodInfo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            objReturnValue <span class="token operator">=</span> methodInfo<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReturnMessage</span><span class="token punctuation">(</span>objReturnValue<span class="token punctuation">,</span> methodMessage<span class="token punctuation">.</span>Args<span class="token punctuation">,</span> methodMessage<span class="token punctuation">.</span>ArgCount<span class="token punctuation">,</span>\n        methodMessage<span class="token punctuation">.</span>LogicalCallContext<span class="token punctuation">,</span> methodMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>拦截方法后，调用都转向Invoke</p><h4 id="一般接口及实现" tabindex="-1"><a class="header-anchor" href="#一般接口及实现" aria-hidden="true">#</a> 一般接口及实现</h4><p>接口</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IOrderService</span>\n<span class="token punctuation">{</span>\n    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetOrderDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>实现</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IOrderService</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;GetOrder123&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetOrderDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;GetOrderDetail123&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>调用示例</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClientProxy</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IOrderService</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> tp <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">GetTransparentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> serviceProxy <span class="token operator">=</span> tp <span class="token keyword">as</span> <span class="token class-name">IOrderService</span><span class="token punctuation">;</span>\n    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>serviceProxy<span class="token punctuation">.</span><span class="token function">GetOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//GetOrderabc</span>\n    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>serviceProxy<span class="token punctuation">.</span><span class="token function">GetOrderDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//GetOrderDetailabc</span>\n    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>GetOrder和GetOrderDetail都会被拦截进入Invoke中</p><p>效果</p><p><img src="http://7xk2dp.com1.z0.glb.clouddn.com/TransparentProxyDemo01201712291538239480.png" alt="image"></p>',19),t=(0,p.Uk)("示例代码："),o={href:"https://github.com/sunven/Abp1",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("https://github.com/sunven/Abp1"),l=(0,p._)("h2",{id:"reference",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),(0,p.Uk)(" Reference")],-1),u={href:"http://blog.csdn.net/gentle_wolf/article/details/6456678",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("再谈透明代理"),i={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[t,(0,p._)("a",o,[c,(0,p.Wm)(a)])]),l,(0,p._)("p",null,[(0,p._)("a",u,[r,(0,p.Wm)(a)])])],64)}}}}]);