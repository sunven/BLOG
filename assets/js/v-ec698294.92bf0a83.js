"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8291],{2087:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-ec698294",path:"/dotnet/abp/dynamicwebapi.html",title:"动态api",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一 对默认WebApi服务的替换",slug:"一-对默认webapi服务的替换",children:[]},{level:2,title:"二 路由",slug:"二-路由",children:[]},{level:2,title:"三 缓存Service",slug:"三-缓存service",children:[]},{level:2,title:"四 使用OWIN来替代IIS",slug:"四-使用owin来替代iis",children:[{level:3,title:"什么是 OWIN ？",slug:"什么是-owin",children:[]},{level:3,title:"为什么使用 OWIN",slug:"为什么使用-owin",children:[]},{level:3,title:"OWIN使用",slug:"owin使用",children:[]},{level:3,title:"请求分析",slug:"请求分析",children:[]}]},{level:2,title:"Reference",slug:"reference",children:[]}],filePathRelative:"dotnet/abp/dynamicwebapi.md",git:{updatedTime:1626107275e3,contributors:[{name:"sunven",email:"604164227@qq.com",commits:1}]}}},818:(n,s,a)=>{a.r(s),a.d(s,{default:()=>g});var e=a(6252);const t=(0,e.uE)('<h1 id="动态api" tabindex="-1"><a class="header-anchor" href="#动态api" aria-hidden="true">#</a> 动态api</h1><p>动态WebApi实现了直接对Service的调用，其实没有跨过ApiController,只是我们自己创建出ApiController</p><p>实现主要分以下几步</p><h2 id="一-对默认webapi服务的替换" tabindex="-1"><a class="header-anchor" href="#一-对默认webapi服务的替换" aria-hidden="true">#</a> 一 对默认WebApi服务的替换</h2><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>ApiGlobalConfiguration<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IHttpControllerSelector</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AbpHttpControllerSelector</span><span class="token punctuation">(</span>ApiGlobalConfiguration<span class="token punctuation">.</span>Configuration<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nApiGlobalConfiguration<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IHttpActionSelector</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AbpApiControllerActionSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nApiGlobalConfiguration<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">HttpControllerActivator</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AbpControllerActivator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="二-路由" tabindex="-1"><a class="header-anchor" href="#二-路由" aria-hidden="true">#</a> 二 路由</h2><p>定义好路由</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>ApiGlobalConfiguration<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>Routes<span class="token punctuation">.</span><span class="token function">MapHttpRoute</span><span class="token punctuation">(</span>\n    <span class="token string">&quot;DynamicWebApi&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;apiservice/{service}/{action}/{id}&quot;</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token punctuation">{</span> id <span class="token operator">=</span> RouteParameter<span class="token punctuation">.</span>Optional <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="三-缓存service" tabindex="-1"><a class="header-anchor" href="#三-缓存service" aria-hidden="true">#</a> 三 缓存Service</h2><p>找出所有需要做成动态WebApi的Service，哪些是Controller哪些是Action事先准备好</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> controllerInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DynamicApiControllerInfo</span><span class="token punctuation">(</span><span class="token string">&quot;Order&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DynamicApiController<span class="token punctuation">&lt;</span>IOrderService<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> methodInfo <span class="token keyword">in</span> DynamicApiControllerActionHelper<span class="token punctuation">.</span><span class="token function">GetMethodsOfType</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IOrderService</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    controllerInfo<span class="token punctuation">.</span>Actions<span class="token punctuation">[</span>methodInfo<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DynamicApiActionInfo</span><span class="token punctuation">(</span>methodInfo<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> HttpMethod<span class="token punctuation">.</span>Get<span class="token punctuation">,</span> methodInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nDynamicApiControllerManager<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>controllerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="四-使用owin来替代iis" tabindex="-1"><a class="header-anchor" href="#四-使用owin来替代iis" aria-hidden="true">#</a> 四 使用OWIN来替代IIS</h2><h3 id="什么是-owin" tabindex="-1"><a class="header-anchor" href="#什么是-owin" aria-hidden="true">#</a> 什么是 OWIN ？</h3><p>OWIN 的全称是 &quot;Open Web Interface for .NET&quot;， OWIN 在 .NET Web 服务器和 .NET Web 应用之间定义了一套标准的接口， 其目的是为了实现服务器与应用之间的解耦， 鼓励为 .NET Web 应用开发简单模块。</p><h3 id="为什么使用-owin" tabindex="-1"><a class="header-anchor" href="#为什么使用-owin" aria-hidden="true">#</a> 为什么使用 OWIN</h3><p>OWIN 定义了 .NET Web 服务器与 .NET Web 应用之间的标准接口， 将应用与服务器 解耦， 使得便携式 .NET Web 应用以及跨平台的愿望成为现实， 标准的 OWIN 应用可以在任何 OWIN 兼容的服务器上运行， 不再依赖与 Windows 和 IIS 。</p><h3 id="owin使用" tabindex="-1"><a class="header-anchor" href="#owin使用" aria-hidden="true">#</a> OWIN使用</h3><p>应用启动时调用</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080/&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> startOpts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StartOptions</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token punctuation">(</span>WebApp<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Start</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>startOpts<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Server run at &quot;</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">&quot; , press Enter to exit.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Startup</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Startup</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configuration</span><span class="token punctuation">(</span><span class="token class-name">IAppBuilder</span> appBuilder<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        appBuilder<span class="token punctuation">.</span><span class="token function">UseWebApi</span><span class="token punctuation">(</span>ApiGlobalConfiguration<span class="token punctuation">.</span>Configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="请求分析" tabindex="-1"><a class="header-anchor" href="#请求分析" aria-hidden="true">#</a> 请求分析</h3><p>http://localhost:8080/apiservice/Order/GetOrderDetail?s=1111</p><ul><li>Order是Controller，也对应IOrderService这个Service</li><li>GetOrderDetail是Action,也对应IOrderService中的GetOrderDetail方</li><li>s=1111为参数</li></ul><p>执行顺序</p><ol><li>先进入AbpHttpControllerSelector，筛选出动态api的请求，</li><li>再进入AbpControllerActivator，创建出ApiController</li><li>再进入AbpApiControllerActionSelector，找出Action。</li><li>最后进入DyanamicHttpActionDescriptor执行Action,也就是执行对应Service的方法</li></ol>',26),p=(0,e.Uk)("示例代码："),o={href:"https://github.com/sunven/Abp1",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("https://github.com/sunven/Abp1"),l=(0,e._)("h2",{id:"reference",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),(0,e.Uk)(" Reference")],-1),i={href:"http://blog.csdn.net/linux7985/article/details/44079103",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("OWIN初探"),u={href:"http://www.cnblogs.com/shanyou/archive/2012/10/19/2730380.html",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("ASP.NET Web API和依赖注入"),d={href:"http://www.cnblogs.com/gangtianci/p/4691150.html",target:"_blank",rel:"noopener noreferrer"},b=(0,e.Uk)("ABP之动态WebAPI(一)"),h={href:"http://www.cnblogs.com/gangtianci/p/4694628.html",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("ABP之动态WebAPI(二)"),g={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[p,(0,e._)("a",o,[c,(0,e.Wm)(a)])]),l,(0,e._)("p",null,[(0,e._)("a",i,[r,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",u,[k,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",d,[b,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",h,[m,(0,e.Wm)(a)])])],64)}}}}]);