"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2218],{3669:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-08b5b38c",path:"/dotnet/designpatterns/singleton.html",title:"单例模式",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"常规实现",slug:"常规实现",children:[]},{level:2,title:"用c#特性实现",slug:"用c-特性实现",children:[]},{level:2,title:"reference",slug:"reference",children:[]}],filePathRelative:"dotnet/designpatterns/singleton.md",git:{updatedTime:1626107275e3,contributors:[{name:"sunven",email:"604164227@qq.com",commits:1}]}}},6660:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var e=a(6252);const p=(0,e.uE)('<h1 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h1><p>保证一个类只有一个实例</p><h2 id="常规实现" tabindex="-1"><a class="header-anchor" href="#常规实现" aria-hidden="true">#</a> 常规实现</h2><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>\n<span class="token doc-comment comment">/// 单例模式的实现</span>\n<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>\n<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// 定义一个静态变量来保存类的实例</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> _uniqueInstance<span class="token punctuation">;</span>\n    <span class="token comment">// 定义一个标识确保线程同步</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">object</span></span> Locker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 定义私有构造函数，使外界不能创建该类实例</span>\n    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>\n    <span class="token doc-comment comment">/// 定义公有方法提供一个全局访问点,同时你也可以定义公有属性来提供全局访问点</span>\n    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>\n    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Singleton</span> <span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// 当第一个线程运行到这里时，此时会对locker对象 &quot;加锁&quot;，</span>\n        <span class="token comment">// 当第二个线程运行该方法时，首先检测到locker对象为&quot;加锁&quot;状态，该线程就会挂起等待第一个线程解锁</span>\n        <span class="token comment">// lock语句运行完之后（即线程运行完之后）会对该对象&quot;解锁&quot;</span>\n        <span class="token comment">// 双重锁定只需要一句判断就可以了</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>_uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">lock</span> <span class="token punctuation">(</span>Locker<span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                <span class="token comment">// 如果类的实例不存在则创建，否则直接返回</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>_uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n                <span class="token punctuation">{</span>\n                    _uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> _uniqueInstance<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="用c-特性实现" tabindex="-1"><a class="header-anchor" href="#用c-特性实现" aria-hidden="true">#</a> 用c#特性实现</h2><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Singleton1</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Singleton1</span> Instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Singleton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token function">Singleton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>等同于：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Singleton2</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Singleton2</span> Instance<span class="token punctuation">;</span>\n    <span class="token keyword">static</span> <span class="token function">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">private</span> <span class="token function">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> reference</h2>',9),t={href:"http://www.cnblogs.com/PatrickLiu/p/8250985.html",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("C#设计模式之一单例模式（Singleton Pattern）【创建型】"),o={href:"http://www.cnblogs.com/zhili/p/SingletonPatterm.html",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("C#设计模式(1)——单例模式"),r={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[(0,e._)("a",t,[c,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",o,[l,(0,e.Wm)(a)])])],64)}}}}]);