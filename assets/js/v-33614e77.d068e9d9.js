"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2754],{4663:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-33614e77",path:"/web/js/html5api.html",title:"HTML5 API",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. navigator.geolocation",slug:"_1-navigator-geolocation",children:[{level:3,title:"navigator.geolocation.getCurrentPosition()",slug:"navigator-geolocation-getcurrentposition",children:[]},{level:3,title:"navigator.geolocation.watchPosition()",slug:"navigator-geolocation-watchposition",children:[]},{level:3,title:"navigator.geolocation.clearWatch()",slug:"navigator-geolocation-clearwatch",children:[]}]},{level:2,title:"2. history",slug:"_2-history",children:[{level:3,title:"history.pushState(data, title [, url])",slug:"history-pushstate-data-title-url",children:[]},{level:3,title:"history.replaceState(data, title [, url])",slug:"history-replacestate-data-title-url",children:[]},{level:3,title:"history.state",slug:"history-state",children:[]},{level:3,title:"window.onpopstate()",slug:"window-onpopstate",children:[]},{level:3,title:"window.location.hash",slug:"window-location-hash",children:[]}]},{level:2,title:"3. 跨域消息传递",slug:"_3-跨域消息传递",children:[{level:3,title:"postMessage()",slug:"postmessage",children:[]},{level:3,title:"message",slug:"message",children:[]},{level:3,title:"reference",slug:"reference",children:[]}]},{level:2,title:"4. Web Worker",slug:"_4-web-worker",children:[{level:3,title:"Worker",slug:"worker",children:[]},{level:3,title:"例子",slug:"例子",children:[]}]},{level:2,title:"类型化数组和ArrayBuffer",slug:"类型化数组和arraybuffer",children:[{level:3,title:"Reference",slug:"reference-1",children:[]}]},{level:2,title:"Blod",slug:"blod",children:[{level:3,title:"Blob URL",slug:"blob-url",children:[]}]}],filePathRelative:"web/js/html5api.md",git:{updatedTime:1626107275e3,contributors:[{name:"sunven",email:"604164227@qq.com",commits:1}]}}},3564:(n,a,s)=>{s.r(a),s.d(a,{default:()=>B});var e=s(6252);const t=(0,e.uE)('<h1 id="html5-api" tabindex="-1"><a class="header-anchor" href="#html5-api" aria-hidden="true">#</a> HTML5 API</h1><h2 id="_1-navigator-geolocation" tabindex="-1"><a class="header-anchor" href="#_1-navigator-geolocation" aria-hidden="true">#</a> 1. navigator.geolocation</h2><h3 id="navigator-geolocation-getcurrentposition" tabindex="-1"><a class="header-anchor" href="#navigator-geolocation-getcurrentposition" aria-hidden="true">#</a> navigator.geolocation.getCurrentPosition()</h3><p>获取用户当前位置</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>geolocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        navigator<span class="token punctuation">.</span>geolocation<span class="token punctuation">.</span><span class="token function">getCurrentPosition</span><span class="token punctuation">(</span>showPosition<span class="token punctuation">,</span> showError<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;您的浏览器不支持Geolocation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">showPosition</span><span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//pos.coords.accuracy 该值表示获取到的位置信息精度是多少</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;纬度：&quot;</span> <span class="token operator">+</span> position<span class="token punctuation">.</span>coords<span class="token punctuation">.</span>latitude <span class="token operator">+</span> <span class="token string">&quot;，经度：&quot;</span> <span class="token operator">+</span> position<span class="token punctuation">.</span>coords<span class="token punctuation">.</span>longitude<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">showError</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> error<span class="token punctuation">.</span><span class="token constant">PERMISSION_DENIED</span><span class="token operator">:</span>\n            <span class="token comment">//用户不允许地理定位</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> error<span class="token punctuation">.</span><span class="token constant">POSITION_UNAVAILABLE</span><span class="token operator">:</span>\n            <span class="token comment">//无法获取当前位置</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> error<span class="token punctuation">.</span><span class="token constant">TIMEOUT</span><span class="token operator">:</span>\n            <span class="token comment">//操作超时</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> error<span class="token punctuation">.</span><span class="token constant">UNKNOWN_ERROR</span><span class="token operator">:</span>\n            <span class="token comment">//</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="navigator-geolocation-watchposition" tabindex="-1"><a class="header-anchor" href="#navigator-geolocation-watchposition" aria-hidden="true">#</a> navigator.geolocation.watchPosition()</h3><p>获取当前位置，同时不断地监视当前位置，一旦用户位置发生更改，就会调用指定的回调函数。</p><h3 id="navigator-geolocation-clearwatch" tabindex="-1"><a class="header-anchor" href="#navigator-geolocation-clearwatch" aria-hidden="true">#</a> navigator.geolocation.clearWatch()</h3><p>停止监视用户位置。传递给此方法的参数应当是调用watchPosition()方法获得的返回值。</p><h2 id="_2-history" tabindex="-1"><a class="header-anchor" href="#_2-history" aria-hidden="true">#</a> 2. history</h2><h3 id="history-pushstate-data-title-url" tabindex="-1"><a class="header-anchor" href="#history-pushstate-data-title-url" aria-hidden="true">#</a> history.pushState(data, title [, url])</h3><p>在history栈中添加一个新的条目</p><ul><li><p>state：会在onpopstate事件触发时作为参数传递过去</p></li><li><p>title：页面标题，当前所有浏览器都会 忽略此参数，一般设为null</p></li><li><p>url：任意有效的URL，用于更新浏览器的地址栏，并不在乎URL是否已经存在地址列表中。更重要的是，它不会重新加载页面。缺省为当前页地址</p></li></ul><h3 id="history-replacestate-data-title-url" tabindex="-1"><a class="header-anchor" href="#history-replacestate-data-title-url" aria-hidden="true">#</a> history.replaceState(data, title [, url])</h3><p>替换当前的记录值 调用参数同 history.pushState()</p><h3 id="history-state" tabindex="-1"><a class="header-anchor" href="#history-state" aria-hidden="true">#</a> history.state</h3><p>用于存储以上方法的data数据，不同浏览器的读写权限不一样</p><h3 id="window-onpopstate" tabindex="-1"><a class="header-anchor" href="#window-onpopstate" aria-hidden="true">#</a> window.onpopstate()</h3><p>监听历史记录点，直观的可认为是监听URL的变化，但会忽略URL的hash部分，监听URL的hash部分，HTML5有新的API为 onhashchange 。 当用户单击浏览器的后退或者前进按钮时触发该事件。在事件处理函数中读取触发事件的事件对象的state属性值，该属性值即为执行pushState方法时所使用的第一个参数值，其中保存了在向浏览器历史记录中添加记录同步保存的对象。</p>',19),p={href:"http://www.zhangxinxu.com/wordpress/2013/06/html5-history-api-pushstate-replacestate-ajax/",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("ajax与HTML5 history pushState/replaceState实例"),l=(0,e._)("h3",{id:"window-location-hash",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#window-location-hash","aria-hidden":"true"},"#"),(0,e.Uk)(" window.location.hash")],-1),c={href:"http://www.ruanyifeng.com/blog/2011/03/url_hash.html",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("URL的井号"),i=(0,e.uE)('<h2 id="_3-跨域消息传递" tabindex="-1"><a class="header-anchor" href="#_3-跨域消息传递" aria-hidden="true">#</a> 3. 跨域消息传递</h2><h3 id="postmessage" tabindex="-1"><a class="header-anchor" href="#postmessage" aria-hidden="true">#</a> postMessage()</h3><p>该方法允许有限的通信——通过异步消息传递的方式——在来自不同源的脚本之间。</p><ul><li>第一个参数是要传递的消息。HTML5标准提到，该参数可以是任意基本类型值或者可以复制的对象，但是，有些当前浏览器实现只支持字符串，因此，如果想要作为消息传递对象或者数组，首先应当使用JSON.stringify()方法对其序列化。</li><li>第二个参数是一个字符串，指定目标窗口的源。其中包括协议、主机名以及URL（可选的）端口部分（可以传递一个完整的URL，但是除了协议、主机名和端口号之外的任何信息都会忽略）。</li></ul><h3 id="message" tabindex="-1"><a class="header-anchor" href="#message" aria-hidden="true">#</a> message</h3><p>在目标窗口的Window对象上就会触发一个onmessage事件</p><ul><li><p>data：作为第一个参数传递给postMessage()方法的消息内容副本。</p></li><li><p>source：消息源自的Window对象。</p></li><li><p>origin：一个字符串，指定消息来源（URL形式）。</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> handleMessage<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;onmessage&quot;</span><span class="token punctuation">,</span> handleMessage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//For IE8</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//e.source</span>\n    <span class="token comment">//e.data</span>\n    <span class="token comment">//e.origin</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>例子</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//父页面</span>\nwindow<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;http://172.16.3.53:1001/test1.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> handleMessage<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;onmessage&quot;</span><span class="token punctuation">,</span> handleMessage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//For IE8</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>origin<span class="token punctuation">,</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;子页面有数据传来了！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//子页面</span>\nwindow<span class="token punctuation">.</span>opener<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://172.16.3.53:1001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> reference</h3>',12),u={href:"http://www.cnblogs.com/wshiqtb/p/3171199.html",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("http://www.cnblogs.com/wshiqtb/p/3171199.html"),d={href:"http://www.cnblogs.com/dolphinX/p/3464056.html",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("http://www.cnblogs.com/dolphinX/p/3464056.html"),b={href:"http://www.cnblogs.com/dolphinX/p/3464056.html",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("html5 postMessage解决跨域、跨窗口消息传递"),g=(0,e.uE)('<h2 id="_4-web-worker" tabindex="-1"><a class="header-anchor" href="#_4-web-worker" aria-hidden="true">#</a> 4. Web Worker</h2><p>Web Workers标准包含两部分。第一部分是Worker对象：该对象是暴露给创建该线程的线程的。第二部分是WorkerGlobalScope：这是一个用来表示新创建的Worker的全局对象，也是Worker线程内部使用的对象。</p><h3 id="worker" tabindex="-1"><a class="header-anchor" href="#worker" aria-hidden="true">#</a> Worker</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> loader<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&quot;utils/loader.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nloader<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果URL采用的是相对路径，那么是以包含调用Worker()构造函数脚本的文档的URL为参照的。而如果指定的URL采用的是绝对路径，那么必须和包含该脚本的文档是同源的（同样的协议、主机名和端口）。</p><p>通过监听Worker对象上的message事件来接收来自Worker的消息：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//loader.js</span>\nworker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> message<span class="token operator">=</span>e<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token comment">//从事件对象中获取消息</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;URL contents:&quot;</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用它进行一些操作</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果Worker抛出了异常：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>worker<span class="token punctuation">.</span><span class="token function-variable function">onerror</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//记录错误消息日志：包括Worker的文件名和行数</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Error at&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span>filename<span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span>lineno<span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Worker对象还有另一个方法：terminate()。该方法强制一个Worker线程结束运行。</p><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3>',11),w={href:"http://sunven.github.io/Demo/html5api/worker/demo1.html",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Uk)("异步地将图片内容替换成动态模糊版本"),v={href:"http://sunven.github.io/Demo/html5api/worker/demo2.html",target:"_blank",rel:"noopener noreferrer"},y=(0,e.Uk)("ajax-worker"),_=(0,e.uE)('<h2 id="类型化数组和arraybuffer" tabindex="-1"><a class="header-anchor" href="#类型化数组和arraybuffer" aria-hidden="true">#</a> 类型化数组和ArrayBuffer</h2><p>类型化数组就是类数组对象，它和常规的数组有如下重要的区别</p><ul><li><p>类型化数组中的元素都是数字。使用构造函数在创建类型化数组的时候决定了数组中数字（有符号或者无符号整数或者浮点数）的类型和大小（以位为单位）。</p></li><li><p>类型化数组有固定的长度。</p></li><li><p>在创建类型化数组的时候，数组中的元素总是默认初始化为0。</p></li></ul><h3 id="reference-1" tabindex="-1"><a class="header-anchor" href="#reference-1" aria-hidden="true">#</a> Reference</h3>',4),U={href:"http://www.zhangxinxu.com/wordpress/2013/10/understand-domstring-document-formdata-blob-file-arraybuffer/",target:"_blank",rel:"noopener noreferrer"},L=(0,e.Uk)("理解DOMString、Document、FormData、Blob、File、ArrayBuffer数据类型"),R=(0,e._)("h2",{id:"blod",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#blod","aria-hidden":"true"},"#"),(0,e.Uk)(" Blod")],-1),q=(0,e._)("h3",{id:"blob-url",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#blob-url","aria-hidden":"true"},"#"),(0,e.Uk)(" Blob URL")],-1),x=(0,e._)("p",null,"传递一个Blob给createObjectURL()方法会返回一个URL（以普通字符串形式）。该URL以blob://开始，紧跟着是一小串文本字符串，该字符串用不透明的唯一标识符来标识Blob。",-1),W=(0,e._)("ul",null,[(0,e._)("li",null,"blob URL只是对浏览器存储在内存中或者磁盘上的Blob的一个简单引用。"),(0,e._)("li",null,"blob://URL和data://URL是不同的，data://URL会对内容进行编码。"),(0,e._)("li",null,"blob://URL和file://URL也是不同的，file://URL直接指向本地文件系统中的一个文件，仅暴露了文件的路径、浏览目录的许可等，除此之外任何内容都会带来安全问题的。")],-1),j={href:"http://sunven.github.io/Demo/html5api/Blod/blod-url.html",target:"_blank",rel:"noopener noreferrer"},E=(0,e.Uk)("利用blod预览图片"),M=(0,e._)("ul",null,[(0,e._)("li",null,"Blob URL并不是永久有效的。一旦用户关闭了或者离开了包含创建Blob URL脚本的文档，该Blob URL就失效了。比如，将Blob URL保存到本地存储器中，然后当用户开始一个新的Web应用会话的时再使用它，这是不可能的。"),(0,e._)("li",null,"Blob URL只允许通过GET请求获取，并且一旦获取成功，浏览器必须返回一个HTTP 200 OK的状态码，同时返回一个使用Blob type属性的Content-Type头部信息。由于Blob URL的工作方式和简单的HTTP URL一致，因此可以通过XMLHttpRequest将它们指定的内容“下载”下来。")],-1),B={render:function(n,a){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e._)("a",p,[o,(0,e.Wm)(s)])])]),l,(0,e._)("p",null,[(0,e._)("a",c,[r,(0,e.Wm)(s)])]),i,(0,e._)("p",null,[(0,e._)("a",u,[k,(0,e.Wm)(s)])]),(0,e._)("p",null,[(0,e._)("a",d,[h,(0,e.Wm)(s)])]),(0,e._)("p",null,[(0,e._)("a",b,[m,(0,e.Wm)(s)])]),g,(0,e._)("p",null,[(0,e._)("a",w,[f,(0,e.Wm)(s)]),(0,e._)("a",v,[y,(0,e.Wm)(s)])]),_,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",U,[L,(0,e.Wm)(s)])])]),R,q,x,W,(0,e._)("p",null,[(0,e._)("a",j,[E,(0,e.Wm)(s)])]),M],64)}}}}]);