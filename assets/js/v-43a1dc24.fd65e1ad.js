"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2718],{9872:(a,e,r)=>{r.r(e),r.d(e,{data:()=>h});const h={key:"v-43a1dc24",path:"/web/js/regex.html",title:"正则表达式基础",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"web/js/regex.md",git:{updatedTime:1626107275e3,contributors:[{name:"sunven",email:"604164227@qq.com",commits:1}]}}},1857:(a,e,r)=>{r.r(e),r.d(e,{default:()=>d});const h=(0,r(6252).uE)('<h1 id="正则表达式基础" tabindex="-1"><a class="header-anchor" href="#正则表达式基础" aria-hidden="true">#</a> 正则表达式基础</h1><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> \\</h4><p>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，&#39;n&#39; 匹配字符 &quot;n&quot;。&#39;\\n&#39; 匹配一个换行符。序列 &#39;\\&#39; 匹配 &quot;&quot; 而 &quot;(&quot; 则匹配 &quot;(&quot;。</p><h4 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a> ^</h4><p>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 &#39;\\n&#39; 或 &#39;\\r&#39; 之后的位置。</p><h4 id="-2" tabindex="-1"><a class="header-anchor" href="#-2" aria-hidden="true">#</a> $</h4><p>匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 &#39;\\n&#39; 或 &#39;\\r&#39; 之前的位置。</p><h4 id="-3" tabindex="-1"><a class="header-anchor" href="#-3" aria-hidden="true">#</a> *</h4><p>匹配前面的子表达式零次或多次。例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于{0,}。</p><h4 id="-4" tabindex="-1"><a class="header-anchor" href="#-4" aria-hidden="true">#</a> +</h4><p>匹配前面的子表达式一次或多次。例如，&#39;zo+&#39; 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 {1,}。</p><h4 id="-5" tabindex="-1"><a class="header-anchor" href="#-5" aria-hidden="true">#</a> ?</h4><p>匹配前面的子表达式零次或一次。例如，&quot;do(es)?&quot; 可以匹配 &quot;do&quot; 或 &quot;does&quot; 中的&quot;do&quot; 。? 等价于 {0,1}。</p><h4 id="n" tabindex="-1"><a class="header-anchor" href="#n" aria-hidden="true">#</a> {n}</h4><p>n 是一个非负整数。匹配确定的 n 次。例如，&#39;o{2}&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但是能匹配 &quot;food&quot; 中的两个 o。</p><h4 id="n-1" tabindex="-1"><a class="header-anchor" href="#n-1" aria-hidden="true">#</a> {n,}</h4><p>n 是一个非负整数。至少匹配n 次。例如，&#39;o{2,}&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但能匹配 &quot;foooood&quot; 中的所有 o。&#39;o{1,}&#39; 等价于 &#39;o+&#39;。&#39;o{0,}&#39; 则等价于 &#39;o*&#39;。</p><h4 id="n-m" tabindex="-1"><a class="header-anchor" href="#n-m" aria-hidden="true">#</a> {n,m}</h4><p>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，&quot;o{1,3}&quot; 将匹配 &quot;fooooood&quot; 中的前三个 o。&#39;o{0,1}&#39; 等价于 &#39;o?&#39;。请注意在逗号和两个数之间不能有空格。</p><h4 id="-6" tabindex="-1"><a class="header-anchor" href="#-6" aria-hidden="true">#</a> ?</h4><p>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 &quot;oooo&quot;，&#39;o+?&#39; 将匹配单个 &quot;o&quot;，而 &#39;o+&#39; 将匹配所有 &#39;o&#39;。</p><h4 id="-7" tabindex="-1"><a class="header-anchor" href="#-7" aria-hidden="true">#</a> .</h4><p>匹配除 &quot;\\n&quot; 之外的任何单个字符。要匹配包括 &#39;\\n&#39; 在内的任何字符，请使用象 &#39;[.\\n]&#39; 的模式。</p><h4 id="pattern" tabindex="-1"><a class="header-anchor" href="#pattern" aria-hidden="true">#</a> (pattern)</h4><p>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 &#39;(&#39; 或 &#39;)&#39;</p><h4 id="pattern-1" tabindex="-1"><a class="header-anchor" href="#pattern-1" aria-hidden="true">#</a> (?:pattern)</h4><p>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 &quot;或&quot; 字符 (|) 来组合一个模式的各个部分是很有用。例如， &#39;industr(?:y|ies) 就是一个比 &#39;industry|industries&#39; 更简略的表达式。</p><h4 id="pattern-2" tabindex="-1"><a class="header-anchor" href="#pattern-2" aria-hidden="true">#</a> (?=pattern)</h4><p>正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，&#39;Windows (?=95|98|NT|2000)&#39; 能匹配 &quot;Windows 2000&quot; 中的 &quot;Windows&quot; ，但不能匹配 &quot;Windows 3.1&quot; 中的 &quot;Windows&quot;。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</p><h4 id="pattern-3" tabindex="-1"><a class="header-anchor" href="#pattern-3" aria-hidden="true">#</a> (?!pattern)</h4><p>负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如&#39;Windows (?!95|98|NT|2000)&#39; 能匹配 &quot;Windows 3.1&quot; 中的 &quot;Windows&quot;，但不能匹配 &quot;Windows 2000&quot; 中的 &quot;Windows&quot;。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</p><h4 id="x-y" tabindex="-1"><a class="header-anchor" href="#x-y" aria-hidden="true">#</a> x|y</h4><p>匹配 x 或 y。例如，&#39;z|food&#39; 能匹配 &quot;z&quot; 或 &quot;food&quot;。&#39;(z|f)ood&#39; 则匹配 &quot;zood&quot; 或 &quot;food&quot;。</p><h4 id="xyz" tabindex="-1"><a class="header-anchor" href="#xyz" aria-hidden="true">#</a> [xyz]</h4><p>字符集合。匹配所包含的任意一个字符。例如， &#39;[abc]&#39; 可以匹配 &quot;plain&quot; 中的 &#39;a&#39;。</p><h4 id="xyz-1" tabindex="-1"><a class="header-anchor" href="#xyz-1" aria-hidden="true">#</a> [^xyz]</h4><p>负值字符集合。匹配未包含的任意字符。例如， &#39;[^abc]&#39; 可以匹配 &quot;plain&quot; 中的&#39;p&#39;。</p><h4 id="a-z" tabindex="-1"><a class="header-anchor" href="#a-z" aria-hidden="true">#</a> [a-z]</h4><p>字符范围。匹配指定范围内的任意字符。例如，&#39;[a-z]&#39; 可以匹配 &#39;a&#39; 到 &#39;z&#39; 范围内的任意小写字母字符。</p><h4 id="a-z-1" tabindex="-1"><a class="header-anchor" href="#a-z-1" aria-hidden="true">#</a> [^a-z]</h4><p>负值字符范围。匹配任何不在指定范围内的任意字符。例如，&#39;[^a-z]&#39; 可以匹配任何不在 &#39;a&#39; 到 &#39;z&#39; 范围内的任意字符。</p><h4 id="b" tabindex="-1"><a class="header-anchor" href="#b" aria-hidden="true">#</a> \\b</h4><p>匹配一个单词边界，也就是指单词和空格间的位置。例如， &#39;er\\b&#39; 可以匹配&quot;never&quot; 中的 &#39;er&#39;，但不能匹配 &quot;verb&quot; 中的 &#39;er&#39;。</p><h4 id="b-1" tabindex="-1"><a class="header-anchor" href="#b-1" aria-hidden="true">#</a> \\B</h4><p>匹配非单词边界。&#39;er\\B&#39; 能匹配 &quot;verb&quot; 中的 &#39;er&#39;，但不能匹配 &quot;never&quot; 中的 &#39;er&#39;。</p><h4 id="cx" tabindex="-1"><a class="header-anchor" href="#cx" aria-hidden="true">#</a> \\cx</h4><p>匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 &#39;c&#39; 字符。</p><h4 id="d" tabindex="-1"><a class="header-anchor" href="#d" aria-hidden="true">#</a> \\d</h4><p>匹配一个数字字符。等价于 [0-9]。</p><h4 id="d-1" tabindex="-1"><a class="header-anchor" href="#d-1" aria-hidden="true">#</a> \\D</h4><p>匹配一个非数字字符。等价于 [^0-9]。</p><h4 id="f" tabindex="-1"><a class="header-anchor" href="#f" aria-hidden="true">#</a> \\f</h4><p>匹配一个换页符。等价于 \\x0c 和 \\cL。</p><h4 id="n-2" tabindex="-1"><a class="header-anchor" href="#n-2" aria-hidden="true">#</a> \\n</h4><p>匹配一个换行符。等价于 \\x0a 和 \\cJ。</p><h4 id="r" tabindex="-1"><a class="header-anchor" href="#r" aria-hidden="true">#</a> \\r</h4><p>匹配一个回车符。等价于 \\x0d 和 \\cM。</p><h4 id="s" tabindex="-1"><a class="header-anchor" href="#s" aria-hidden="true">#</a> \\s</h4><p>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。</p><h4 id="s-1" tabindex="-1"><a class="header-anchor" href="#s-1" aria-hidden="true">#</a> \\S</h4><p>匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</p><h4 id="t" tabindex="-1"><a class="header-anchor" href="#t" aria-hidden="true">#</a> \\t</h4><p>匹配一个制表符。等价于 \\x09 和 \\cI。</p><h4 id="v" tabindex="-1"><a class="header-anchor" href="#v" aria-hidden="true">#</a> \\v</h4><p>匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</p><h4 id="w" tabindex="-1"><a class="header-anchor" href="#w" aria-hidden="true">#</a> \\w</h4><p>匹配包括下划线的任何单词字符。等价于&#39;[A-Za-z0-9_]&#39;。</p><h4 id="w-1" tabindex="-1"><a class="header-anchor" href="#w-1" aria-hidden="true">#</a> \\W</h4><p>匹配任何非单词字符。等价于 &#39;[^A-Za-z0-9_]&#39;。</p><h4 id="xn" tabindex="-1"><a class="header-anchor" href="#xn" aria-hidden="true">#</a> \\xn</h4><p>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，&#39;\\x41&#39; 匹配 &quot;A&quot;。&#39;\\x041&#39; 则等价于 &#39;\\x04&#39; &amp; &quot;1&quot;。正则表达式中可以使用 ASCII 编码。.</p><h4 id="num" tabindex="-1"><a class="header-anchor" href="#num" aria-hidden="true">#</a> \\num</h4><p>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，&#39;(.)\\1&#39; 匹配两个连续的相同字符。</p><h4 id="n-3" tabindex="-1"><a class="header-anchor" href="#n-3" aria-hidden="true">#</a> \\n</h4><p>标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</p><h4 id="nm" tabindex="-1"><a class="header-anchor" href="#nm" aria-hidden="true">#</a> \\nm</h4><p>标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。</p><h4 id="nml" tabindex="-1"><a class="header-anchor" href="#nml" aria-hidden="true">#</a> \\nml</h4><p>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</p><h4 id="un" tabindex="-1"><a class="header-anchor" href="#un" aria-hidden="true">#</a> \\un</h4><p>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \\u00A9 匹配版权符号 (?)。</p>',81),d={render:function(a,e){return h}}}}]);