"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3503],{8642:(e,n,s)=>{s.r(n),s.d(n,{data:()=>a});const a={key:"v-66440dc0",path:"/dotnet/abp/abpmodule.html",title:"ABP-Module",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"什么是Module？",slug:"什么是module",children:[]},{level:2,title:"AbpModule",slug:"abpmodule",children:[]},{level:2,title:"ABP如何发现Moudle",slug:"abp如何发现moudle",children:[{level:3,title:"1. 程序入口调用：AbpBootstrapper.Initialize()",slug:"_1-程序入口调用-abpbootstrapper-initialize",children:[]},{level:3,title:"2. 通过入口的Moudle获取到所有互相依赖的Moudle",slug:"_2-通过入口的moudle获取到所有互相依赖的moudle",children:[]},{level:3,title:"3. 注册所有Moudle",slug:"_3-注册所有moudle",children:[]},{level:3,title:"4. 创建所有Module的描述信息",slug:"_4-创建所有module的描述信息",children:[]},{level:3,title:"5. 初始化所有Moudle",slug:"_5-初始化所有moudle",children:[]}]},{level:2,title:"如何把自己Moudle中的类和接口注册到abp框架中",slug:"如何把自己moudle中的类和接口注册到abp框架中",children:[]},{level:2,title:"模块的生命周期",slug:"模块的生命周期",children:[{level:3,title:"1. PreInitialize",slug:"_1-preinitialize",children:[]},{level:3,title:"2. Initialize",slug:"_2-initialize",children:[]},{level:3,title:"3. PostInitialize",slug:"_3-postinitialize",children:[]},{level:3,title:"4. Shutdown",slug:"_4-shutdown",children:[]}]},{level:2,title:"模块依赖",slug:"模块依赖",children:[]},{level:2,title:"调用依赖模块",slug:"调用依赖模块",children:[{level:3,title:"在AbpWebModule中如何调用AbpWebCommonModule中的方法？",slug:"在abpwebmodule中如何调用abpwebcommonmodule中的方法",children:[]}]},{level:2,title:"abp底层框架的一些功能模块如何注册？",slug:"abp底层框架的一些功能模块如何注册",children:[]},{level:2,title:"Reference",slug:"reference",children:[]}],filePathRelative:"dotnet/abp/abpmodule.md",git:{updatedTime:1626107275e3,contributors:[{name:"sunven",email:"604164227@qq.com",commits:1}]}}},5950:(e,n,s)=>{s.r(n),s.d(n,{default:()=>p});var a=s(6252);const l=(0,a.uE)('<h1 id="abp-module" tabindex="-1"><a class="header-anchor" href="#abp-module" aria-hidden="true">#</a> ABP-Module</h1><h2 id="什么是module" tabindex="-1"><a class="header-anchor" href="#什么是module" aria-hidden="true">#</a> 什么是Module？</h2><p>Module就是模块化的设计思想。开发人员可以将自定义的功能以模块的形式集成到项目中。具体的功能也可以设计成一个单独的模块</p><h2 id="abpmodule" tabindex="-1"><a class="header-anchor" href="#abpmodule" aria-hidden="true">#</a> AbpModule</h2><p>AbpModule是所有Module的基类。</p><h2 id="abp如何发现moudle" tabindex="-1"><a class="header-anchor" href="#abp如何发现moudle" aria-hidden="true">#</a> ABP如何发现Moudle</h2><h3 id="_1-程序入口调用-abpbootstrapper-initialize" tabindex="-1"><a class="header-anchor" href="#_1-程序入口调用-abpbootstrapper-initialize" aria-hidden="true">#</a> 1. 程序入口调用：AbpBootstrapper.Initialize()</h3><h3 id="_2-通过入口的moudle获取到所有互相依赖的moudle" tabindex="-1"><a class="header-anchor" href="#_2-通过入口的moudle获取到所有互相依赖的moudle" aria-hidden="true">#</a> 2. 通过入口的Moudle获取到所有互相依赖的Moudle</h3><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>private static void AddModuleAndDependenciesRecursively(List&lt;Type&gt; modules, Type module)\n{\n    if (!IsAbpModule(module))\n    {\n        throw new AbpInitializationException(&quot;This type is not an ABP module: &quot; + module.AssemblyQualifiedName);\n    }\n\n    if (modules.Contains(module))\n    {\n        return;\n    }\n\n    modules.Add(module);\n\n    var dependedModules = FindDependedModuleTypes(module);\n    foreach (var dependedModule in dependedModules)\n    {\n        AddModuleAndDependenciesRecursively(modules, dependedModule);\n    }\n}\n\n/// &lt;summary&gt;\n/// Finds direct depended modules of a module (excluding given module).\n/// &lt;/summary&gt;\npublic static List&lt;Type&gt; FindDependedModuleTypes(Type moduleType)\n{\n    if (!IsAbpModule(moduleType))\n    {\n        throw new AbpInitializationException(&quot;This type is not an ABP module: &quot; + moduleType.AssemblyQualifiedName);\n    }\n\n    var list = new List&lt;Type&gt;();\n\n    if (moduleType.GetTypeInfo().IsDefined(typeof(DependsOnAttribute), true))\n    {\n        var dependsOnAttributes = moduleType.GetTypeInfo().GetCustomAttributes(typeof(DependsOnAttribute), true).Cast&lt;DependsOnAttribute&gt;();\n        foreach (var dependsOnAttribute in dependsOnAttributes)\n        {\n            foreach (var dependedModuleType in dependsOnAttribute.DependedModuleTypes)\n            {\n                list.Add(dependedModuleType);\n            }\n        }\n    }\n\n    return list;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h3 id="_3-注册所有moudle" tabindex="-1"><a class="header-anchor" href="#_3-注册所有moudle" aria-hidden="true">#</a> 3. 注册所有Moudle</h3><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>RegisterModules(moduleTypes);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_4-创建所有module的描述信息" tabindex="-1"><a class="header-anchor" href="#_4-创建所有module的描述信息" aria-hidden="true">#</a> 4. 创建所有Module的描述信息</h3><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>CreateModules(moduleTypes, plugInModuleTypes);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>AbpModule的基本信息放在AbpModuleInfo类中</li><li>多个AbpModuleInfo放在AbpModuleCollection集合中</li></ul><h3 id="_5-初始化所有moudle" tabindex="-1"><a class="header-anchor" href="#_5-初始化所有moudle" aria-hidden="true">#</a> 5. 初始化所有Moudle</h3><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>public virtual void StartModules()\n{\n    var sortedModules = _modules.GetSortedModuleListByDependency();\n    sortedModules.ForEach(module =&gt; module.Instance.PreInitialize());\n    sortedModules.ForEach(module =&gt; module.Instance.Initialize());\n    sortedModules.ForEach(module =&gt; module.Instance.PostInitialize());\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>由于模块有依赖关系存在，所以初始化之前确定好初始化顺序，即：被依赖的模块要在依赖的模块之前初始化 至此所有Moudle都被Abp框架集成了</p></blockquote><h2 id="如何把自己moudle中的类和接口注册到abp框架中" tabindex="-1"><a class="header-anchor" href="#如何把自己moudle中的类和接口注册到abp框架中" aria-hidden="true">#</a> 如何把自己Moudle中的类和接口注册到abp框架中</h2><p>比如AbpWebMvcModule这个模块，就是如何把Controller注册到Abp框架中</p><p>每个模块都有PreInitialize 和 Initialize方法</p><ol><li>在PreInitialize添加依赖关系</li><li>在Initialize替换ControllerFactory</li></ol><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>/// &lt;summary&gt;\n/// This module is used to build ASP.NET MVC web sites using Abp.\n/// &lt;/summary&gt;\n[DependsOn(typeof(AbpWebModule))]\npublic class AbpWebMvcModule : AbpModule\n{\n    /// &lt;inheritdoc/&gt;\n    public override void PreInitialize()\n    {\n        //添加依赖关系\n        IocManager.AddConventionalRegistrar(new ControllerConventionalRegistrar());\n\n        IocManager.Register&lt;IAbpMvcConfiguration, AbpMvcConfiguration&gt;();\n\n        Configuration.ReplaceService&lt;IAbpAntiForgeryManager, AbpMvcAntiForgeryManager&gt;();\n    }\n\n    /// &lt;inheritdoc/&gt;\n    public override void Initialize()\n    {\n        IocManager.RegisterAssemblyByConvention(Assembly.GetExecutingAssembly());\n        //用WindsorControllerFactory替换MVC下默认的ControllerFactory\n        //MVC将使用WindsorControllerFactory从IOC容器中解析出controller\n        ControllerBuilder.Current.SetControllerFactory(new WindsorControllerFactory(IocManager));\n        HostingEnvironment.RegisterVirtualPathProvider(IocManager.Resolve&lt;EmbeddedResourceVirtualPathProvider&gt;());\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>依赖关系表明：注册所有Controller</p><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>/// &lt;summary&gt;\n/// Registers all MVC Controllers derived from &lt;see cref=&quot;Controller&quot;/&gt;.\n/// &lt;/summary&gt;\npublic class ControllerConventionalRegistrar : IConventionalDependencyRegistrar\n{\n    /// &lt;inheritdoc/&gt;\n    public void RegisterAssembly(IConventionalRegistrationContext context)\n    {\n        //注册所有Controller\n        context.IocManager.IocContainer.Register(\n            Classes.FromAssembly(context.Assembly)\n                .BasedOn&lt;Controller&gt;()\n                .If(type =&gt; !type.GetTypeInfo().IsGenericTypeDefinition)\n                .LifestyleTransient()\n            );\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>WindsorControllerFactory将替代DefaultControllerFactory</p><p><img src="http://7xk2dp.com1.z0.glb.clouddn.com/20171216151343425120403.png" alt="20171216151343425120403.png"></p><p>从IOC容器中解析出Controller</p><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>/// &lt;summary&gt;\n/// This class is used to allow MVC to use dependency injection system while creating MVC controllers.\n/// &lt;/summary&gt;\npublic class WindsorControllerFactory : DefaultControllerFactory\n{\n    /// &lt;summary&gt;\n    /// Reference to DI kernel.\n    /// &lt;/summary&gt;\n    private readonly IIocResolver _iocManager;\n\n    /// &lt;summary&gt;\n    /// Creates a new instance of WindsorControllerFactory.\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;iocManager&quot;&gt;Reference to DI kernel&lt;/param&gt;\n    public WindsorControllerFactory(IIocResolver iocManager)\n    {\n        _iocManager = iocManager;\n    }\n\n    /// &lt;summary&gt;\n    /// Called by MVC system and releases/disposes given controller instance.\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;controller&quot;&gt;Controller instance&lt;/param&gt;\n    public override void ReleaseController(IController controller)\n    {\n        _iocManager.Release(controller);\n    }\n\n    /// &lt;summary&gt;\n    /// Called by MVC system and creates controller instance for given controller type.\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;requestContext&quot;&gt;Request context&lt;/param&gt;\n    /// &lt;param name=&quot;controllerType&quot;&gt;Controller type&lt;/param&gt;\n    /// &lt;returns&gt;&lt;/returns&gt;\n    protected override IController GetControllerInstance(RequestContext requestContext, Type controllerType)\n    {\n        if (controllerType == null)\n        {\n            return base.GetControllerInstance(requestContext, controllerType);\n        }\n\n        return _iocManager.Resolve&lt;IController&gt;(controllerType);\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h2 id="模块的生命周期" tabindex="-1"><a class="header-anchor" href="#模块的生命周期" aria-hidden="true">#</a> 模块的生命周期</h2><h3 id="_1-preinitialize" tabindex="-1"><a class="header-anchor" href="#_1-preinitialize" aria-hidden="true">#</a> 1. PreInitialize</h3><p>初始化之前：当应用启动后会首先调用这个方法，在依赖注入之前。</p><h3 id="_2-initialize" tabindex="-1"><a class="header-anchor" href="#_2-initialize" aria-hidden="true">#</a> 2. Initialize</h3><p>初始化：这个方法一般是用来依赖注入的，一般调用IocManager.RegisterAssemblyByConvention实现。</p><h3 id="_3-postinitialize" tabindex="-1"><a class="header-anchor" href="#_3-postinitialize" aria-hidden="true">#</a> 3. PostInitialize</h3><p>用来解析依赖关系。</p><h3 id="_4-shutdown" tabindex="-1"><a class="header-anchor" href="#_4-shutdown" aria-hidden="true">#</a> 4. Shutdown</h3><p>当应用关闭以后，这个方法会被调用。</p><h2 id="模块依赖" tabindex="-1"><a class="header-anchor" href="#模块依赖" aria-hidden="true">#</a> 模块依赖</h2><p>Abp框架会自动解析模块之间的依赖关系</p><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>[DependsOn(typeof(AbpWebCommonModule))]\npublic class AbpWebModule : AbpModule\n{\n    /// &lt;inheritdoc/&gt;\n    public override void Initialize()\n    {\n        //依赖注入\n        IocManager.RegisterAssemblyByConvention(Assembly.GetExecutingAssembly());\n    }\n}\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>AbpWebModule依赖于AbpWebCommonModule，AbpWebCommonModule会在AbpWebModule之前初始化</p><p>这两个模块启动的顺序为：</p><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>AbpWebCommonModule.PreInitialize();\nAbpWebModule.PreInitialize();\n\nAbpWebCommonModule.Initialize();\nAbpWebModule.Initialize();\n\nAbpWebCommonModule.PostInitialize();\nAbpWebModule.PostInitialize();\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>ABP先完成所有Module的PreInitialize，接着再执行所有Module的Initialize，最后执行PostInitialize。不是执行完一个Module的这三个方法，再去执行下一个Module的这三个方法</p></blockquote><h2 id="调用依赖模块" tabindex="-1"><a class="header-anchor" href="#调用依赖模块" aria-hidden="true">#</a> 调用依赖模块</h2><h3 id="在abpwebmodule中如何调用abpwebcommonmodule中的方法" tabindex="-1"><a class="header-anchor" href="#在abpwebmodule中如何调用abpwebcommonmodule中的方法" aria-hidden="true">#</a> 在AbpWebModule中如何调用AbpWebCommonModule中的方法？</h3><p>在AbpWebModule中：</p><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>private readonly abpWebCommonModule _abpWebCommonModule;\n\npublic AbpWebModule(AbpWebCommonModule abpWebCommonModule)\n{\n    _abpWebCommonModule = abpWebCommonModule;\n}\n\npublic override void PreInitialize()\n{\n    //调用abpWebCommonModule中的方法。\n    //_abpWebCommonModule.\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="abp底层框架的一些功能模块如何注册" tabindex="-1"><a class="header-anchor" href="#abp底层框架的一些功能模块如何注册" aria-hidden="true">#</a> abp底层框架的一些功能模块如何注册？</h2><p>底层的模块都会依赖于AbpKernelModule，AbpKernelModule中主要初始化各种拦截器，如审计日志、多语言、工作单元拦截器等。</p><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>public override void PreInitialize()\n{\n    IocManager.AddConventionalRegistrar(new BasicConventionalRegistrar());\n\n    IocManager.Register&lt;IScopedIocResolver, ScopedIocResolver&gt;(DependencyLifeStyle.Transient);\n    IocManager.Register(typeof(IAmbientScopeProvider&lt;&gt;), typeof(DataContextAmbientScopeProvider&lt;&gt;), DependencyLifeStyle.Transient);\n\n    AddAuditingSelectors();\n    AddLocalizationSources();\n    AddSettingProviders();\n    AddUnitOfWorkFilters();\n    ConfigureCaches();\n    AddIgnoredTypes();\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>',52),r={href:"http://www.cnblogs.com/1zhk/p/5281458.html",target:"_blank",rel:"noopener noreferrer"},i=(0,a.Uk)("ABP源码分析三：ABP Module"),p={render:function(e,n){const s=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[l,(0,a._)("p",null,[(0,a._)("a",r,[i,(0,a.Wm)(s)])])],64)}}}}]);