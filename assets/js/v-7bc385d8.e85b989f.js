"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2526],{3827:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7bc385d8",path:"/web/other/webcache.html",title:"前端缓存",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"强缓存",slug:"强缓存",children:[{level:3,title:"使用",slug:"使用",children:[]},{level:3,title:"验证",slug:"验证",children:[]}]},{level:2,title:"协商缓存",slug:"协商缓存",children:[{level:3,title:"Last-Modified",slug:"last-modified",children:[]},{level:3,title:"Etag",slug:"etag",children:[]},{level:3,title:"验证",slug:"验证-1",children:[]}]},{level:2,title:"示例代码",slug:"示例代码",children:[]},{level:2,title:"reference",slug:"reference",children:[]}],filePathRelative:"web/other/webcache.md",git:{updatedTime:1626107275e3,contributors:[{name:"sunven",email:"604164227@qq.com",commits:1}]}}},3196:(n,s,a)=>{a.r(s),a.d(s,{default:()=>H});var p=a(6252);const t=(0,p.uE)('<h1 id="前端缓存" tabindex="-1"><a class="header-anchor" href="#前端缓存" aria-hidden="true">#</a> 前端缓存</h1><h2 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存" aria-hidden="true">#</a> 强缓存</h2><p>浏览器始终去缓存中取数据，如果有。</p><p><code>Cache-Control</code> 通用消息头字段被用于在http 请求和响应中通过指定指令来实现缓存机制。缓存指令是单向的, 这意味着在请求设置的指令，在响应中不一定包含相同的指令</p><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><p><code>Cache-Control: max-age=&lt;seconds&gt;</code> 表示在seconds秒内再次访问该资源，均使用本地的缓存</p><blockquote><p>Expire是HTTP1.0标准下的字段,可以忽略了</p></blockquote>',7),e={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("Cache-Control"),c=(0,p.Uk)("：MDN"),l=(0,p.uE)('<h3 id="验证" tabindex="-1"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h3><p>chrome打开新标签页，输入网址回车，首页也会命中强缓存，如下图</p><p><img src="http://qiniu.llweb.top/Snipaste_2018-12-18_15-32-46201812181533538076.png" alt="image"></p><p>如果是当前页F5或者地址栏回车，首页不会命中强缓存，为什么？？？</p><p><img src="http://qiniu.llweb.top/Snipaste_2018-12-18_15-37-16201812181537266194.png" alt="image"></p><h2 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a> 协商缓存</h2><p>向服务器验证一下缓存的有效性来确定是否使用缓存</p><h3 id="last-modified" tabindex="-1"><a class="header-anchor" href="#last-modified" aria-hidden="true">#</a> Last-Modified</h3><p>Response Headers：服务端告诉客户端资源的最后修改时间</p><p>在此请求客户端携带以下参数到服务端</p><p><code>if-Modified-Since</code> 是否文件被修改了</p><p><code>if-Unmodified-Since</code> 是否文件没有被修改</p><h3 id="etag" tabindex="-1"><a class="header-anchor" href="#etag" aria-hidden="true">#</a> Etag</h3><p>Response Headers：服务端告诉客户端资源的唯一标识</p><p>在此请求客户端携带以下参数到服务端</p><p><code>If-None-Match</code> 如果不匹配</p><blockquote><p>Etag优先级大于Last-Modified</p></blockquote><h3 id="验证-1" tabindex="-1"><a class="header-anchor" href="#验证-1" aria-hidden="true">#</a> 验证</h3><p>协商缓存命中返回304</p><p><img src="http://qiniu.llweb.top/Snipaste_2018-12-18_15-54-48201812181555056264.png" alt="image"></p><blockquote><p>两类缓存机制可以同时存在，强制缓存的优先级高于协商缓存</p></blockquote><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h2>',22),u=(0,p.Uk)("nodejs做服务端，示例主要参考："),i={href:"https://github.com/BlackGoldTeam/cache-control-nodejs-demo/blob/master/server.js",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("https://github.com/BlackGoldTeam/cache-control-nodejs-demo/blob/master/server.js"),k=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> etag <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;etag&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fresh <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fresh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> filePath<span class="token punctuation">,</span> isHtml<span class="token punctuation">,</span> isFresh<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> pathname <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>\n    <span class="token comment">//根据请求路径取文件绝对路径</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;/index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        isHtml <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        isHtml <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 读取文件描述信息，用于计算etag及设置Last-Modified</span>\n    fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stat</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token string">&#39;not found&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>isHtml<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// html文件使用协商缓存</span>\n                <span class="token keyword">const</span> lastModified <span class="token operator">=</span> stat<span class="token punctuation">.</span>mtime<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">const</span> fileEtag <span class="token operator">=</span> <span class="token function">etag</span><span class="token punctuation">(</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Cache-Control&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;public, max-age=0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Last-Modified&#39;</span><span class="token punctuation">,</span> lastModified<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;ETag&#39;</span><span class="token punctuation">,</span> fileEtag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token comment">// 根据请求头判断缓存是否是最新的</span>\n                isFresh <span class="token operator">=</span> <span class="token function">fresh</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                    <span class="token string">&#39;etag&#39;</span><span class="token operator">:</span> fileEtag<span class="token punctuation">,</span>\n                    <span class="token string">&#39;last-modified&#39;</span><span class="token operator">:</span> lastModified\n                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 其他静态资源使用强缓存</span>\n                res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Cache-Control&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;max-age=10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> fileContent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token string">&#39;not found&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isHtml <span class="token operator">&amp;&amp;</span> isFresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token comment">//如果缓存是最新的 则返回304状态码</span>\n                        <span class="token comment">//由于其他资源使用了强缓存 所以不会出现304</span>\n                        res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">304</span><span class="token punctuation">,</span> <span class="token string">&#39;Not Modified&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                        res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileContent<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server is running on http://localhost:8080/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> reference</h2>',2),d={href:"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},b=(0,p.Uk)("HTTP 缓存"),h=(0,p.Uk)("：Google Developers"),m={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Uk)("HTTP 缓存"),g=(0,p.Uk)("：MDN"),w={href:"https://juejin.im/post/5c136bd16fb9a049d37efc47",target:"_blank",rel:"noopener noreferrer"},v=(0,p.Uk)("前端缓存最佳实践"),_={href:"https://juejin.im/post/5a1d4e546fb9a0450f21af23",target:"_blank",rel:"noopener noreferrer"},y=(0,p.Uk)("HTTP----HTTP缓存机制"),H={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[(0,p._)("a",e,[o,(0,p.Wm)(a)]),c]),l,(0,p._)("p",null,[u,(0,p._)("a",i,[r,(0,p.Wm)(a)])]),k,(0,p._)("p",null,[(0,p._)("a",d,[b,(0,p.Wm)(a)]),h]),(0,p._)("p",null,[(0,p._)("a",m,[f,(0,p.Wm)(a)]),g]),(0,p._)("p",null,[(0,p._)("a",w,[v,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",_,[y,(0,p.Wm)(a)])])],64)}}}}]);