"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8434],{697:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3b5f0fa0",path:"/web/js/amdandcmd.html",title:"AMD 和 CMD",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"脚本的无阻塞加载",slug:"脚本的无阻塞加载",children:[{level:3,title:"defer 和 async",slug:"defer-和-async",children:[]}]},{level:2,title:"AMD和CMD",slug:"amd和cmd",children:[{level:3,title:"AMD",slug:"amd",children:[]},{level:3,title:"CMD",slug:"cmd",children:[]}]},{level:2,title:"reference",slug:"reference",children:[]}],filePathRelative:"web/js/amdandcmd.md",git:{updatedTime:1626107275e3,contributors:[{name:"sunven",email:"604164227@qq.com",commits:1}]}}},5403:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var p=a(6252);const t=(0,p.uE)('<h1 id="amd-和-cmd" tabindex="-1"><a class="header-anchor" href="#amd-和-cmd" aria-hidden="true">#</a> AMD 和 CMD</h1><h2 id="脚本的无阻塞加载" tabindex="-1"><a class="header-anchor" href="#脚本的无阻塞加载" aria-hidden="true">#</a> 脚本的无阻塞加载</h2><p>moduleA.js 代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/*\n此处可以放jquery源码\n使得该文件变大，以便异步加载时看效果\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>moduleB.js 代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>同步加载</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;moduleA.js&quot;</span> onload<span class="token operator">=</span><span class="token string">&quot;console.log(&#39;A loaded&#39;)&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;moduleB.js&quot;</span> onload<span class="token operator">=</span><span class="token string">&quot;console.log(&#39;B loaded&#39;)&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>输出</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token constant">I</span>&#39;m <span class="token constant">A</span>\n<span class="token constant">A</span> loaded\n<span class="token constant">I</span>&#39;m <span class="token constant">B</span>\n<span class="token constant">A</span> loaded\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="defer-和-async" tabindex="-1"><a class="header-anchor" href="#defer-和-async" aria-hidden="true">#</a> defer 和 async</h3><p><code>defer</code>：在文档完成解析后，触发 DOMContentLoaded 事件前执行。如果缺少 src 属性（即内嵌脚本），该属性不应被使用，因为这种情况下它不起作用。对动态嵌入的脚本使用 <code>async=false</code> 来达到类似的效果。</p><p><code>async</code>：是否在允许的情况下异步执行该脚本。该属性对于内联脚本无作用 (即没有src属性的脚本）。</p><h4 id="defer-示例" tabindex="-1"><a class="header-anchor" href="#defer-示例" aria-hidden="true">#</a> defer 示例</h4><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>moduleA.js<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;A loaded&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>moduleB.js<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;B loaded&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>输出</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token constant">I</span>&#39;m <span class="token constant">B</span>\n<span class="token constant">B</span> loaded\n<span class="token constant">I</span>&#39;m <span class="token constant">A</span>\n<span class="token constant">A</span> loaded\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="async-示例" tabindex="-1"><a class="header-anchor" href="#async-示例" aria-hidden="true">#</a> async 示例</h4><p>异步加载</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n        <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">&quot;moduleA.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;async A loaded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">&quot;moduleB.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;async B loaded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">function</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> srcEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            srcEle<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>\n            srcEle<span class="token punctuation">.</span>async <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            srcEle<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>srcEle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><blockquote><p>动态创建的script标签，async默认为true;</p></blockquote><p>输出</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token constant">I</span>&#39;m <span class="token constant">B</span>\n<span class="token keyword">async</span> <span class="token constant">B</span> loaded\n<span class="token constant">I</span>&#39;m <span class="token constant">A</span>\n<span class="token keyword">async</span> <span class="token constant">A</span> loaded\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>相同之处：</p><ul><li>加载文件时不阻塞页面渲染</li><li>使用这两个属性的脚本中不能调用document.write方法</li><li>有脚本的onload的事件回调</li></ul><p>不同之处</p><ul><li>每一个async属性的脚本都在它下载结束之后立刻执行，同时会在window的load事件之前执行。所以就有可能出现脚本执行顺序被打乱的情况；</li><li>每一个defer属性的脚本都是在页面解析完毕之后，按照原本的顺序执行，同时会在document的DOMContentLoaded之前执行</li></ul><h2 id="amd和cmd" tabindex="-1"><a class="header-anchor" href="#amd和cmd" aria-hidden="true">#</a> AMD和CMD</h2><h3 id="amd" tabindex="-1"><a class="header-anchor" href="#amd" aria-hidden="true">#</a> AMD</h3><p>RequireJS的标准</p><p>特点：依赖前置、预执行</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;./a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//运行至此，a.js和b.js已经下载完成</span>\n    <span class="token comment">//a模块和b模块已经执行完</span>\n    a<span class="token punctuation">.</span><span class="token function">doing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    b<span class="token punctuation">.</span><span class="token function">doing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd" aria-hidden="true">#</a> CMD</h3><p>SeaJS的标准</p><p>特点：依赖就近、懒执行</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//等待a.js下载、执行完</span>\n    a<span class="token punctuation">.</span><span class="token function">doing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//等待b.js下载、执行完</span>\n    b<span class="token punctuation">.</span><span class="token function">doing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> reference</h2>',37),e={href:"https://www.zhihu.com/question/20351507",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("AMD 和 CMD 的区别有哪些？"),c={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[(0,p._)("a",e,[o,(0,p.Wm)(a)])])],64)}}}}]);