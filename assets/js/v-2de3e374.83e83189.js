"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6958],{8687:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2de3e374",path:"/dotnet/designpatterns/state.html",title:"状态模式",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"reference",slug:"reference",children:[]}],filePathRelative:"dotnet/designpatterns/state.md",git:{updatedTime:1626107275e3,contributors:[{name:"sunven",email:"604164227@qq.com",commits:1}]}}},1851:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var p=a(6252);const t=(0,p.uE)('<h1 id="状态模式" tabindex="-1"><a class="header-anchor" href="#状态模式" aria-hidden="true">#</a> 状态模式</h1><p>允许一个对象在其内部状态改变时自动改变其行为，对象看起来就像是改变了它的类</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">State</span> State <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        State <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vip1</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 充钱</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Recharge</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> count<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        State<span class="token punctuation">.</span><span class="token function">Recharge</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;充值金额为:{0}&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;用户余额为:{0}&quot;</span><span class="token punctuation">,</span> State<span class="token punctuation">.</span>Money<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;用状态为:{0}&quot;</span><span class="token punctuation">,</span> State<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 抽象状态类</span>\n<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">State</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">User</span> User <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> UpperLimit <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Money <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>\n    <span class="token doc-comment comment">/// 充钱</span>\n    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>\n    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>\n    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Recharge</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> count<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Money <span class="token operator">+=</span> count<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vip1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">State</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">Vip1</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> money<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        User <span class="token operator">=</span> user<span class="token punctuation">;</span>\n        Money <span class="token operator">=</span> money<span class="token punctuation">;</span>\n        UpperLimit <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Recharge</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> count<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Recharge</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>Money <span class="token operator">&gt;</span> UpperLimit<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            User<span class="token punctuation">.</span>State <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vip2</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vip2</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">State</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">Vip2</span><span class="token punctuation">(</span><span class="token class-name">State</span> state<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        User <span class="token operator">=</span> state<span class="token punctuation">.</span>User<span class="token punctuation">;</span>\n        Money <span class="token operator">=</span> state<span class="token punctuation">.</span>Money<span class="token punctuation">;</span>\n        UpperLimit <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Recharge</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> count<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Recharge</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>Money <span class="token operator">&gt;</span> UpperLimit<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            User<span class="token punctuation">.</span>State <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vip3</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vip3</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">State</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">Vip3</span><span class="token punctuation">(</span><span class="token class-name">State</span> state<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        User <span class="token operator">=</span> state<span class="token punctuation">.</span>User<span class="token punctuation">;</span>\n        Money <span class="token operator">=</span> state<span class="token punctuation">.</span>Money<span class="token punctuation">;</span>\n        UpperLimit <span class="token operator">=</span> <span class="token number">700</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Recharge</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> count<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Recharge</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>Money <span class="token operator">&gt;</span> UpperLimit<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;没有更高级别了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><p>调用：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    user<span class="token punctuation">.</span><span class="token function">Recharge</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> reference</h2>',6),e={href:"http://www.cnblogs.com/PatrickLiu/p/8032683.html",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("C#设计模式之十八状态模式（State Pattern）【行为型】"),o={href:"http://www.cnblogs.com/zhili/p/StatePattern.html",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("C#设计模式(19)——状态者模式（State Pattern）"),u={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[(0,p._)("a",e,[c,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",o,[l,(0,p.Wm)(a)])])],64)}}}}]);